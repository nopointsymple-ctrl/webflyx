[4mGIT-LOG[24m(1)                                                                             Git Manual                                                                            [4mGIT-LOG[24m(1)

[1mNAME[0m
       git-log - Show commit logs

[1mSYNOPSIS[0m
       [4mgit[24m [4mlog[24m [<options>] [<revision-range>] [[--] <path>...]

[1mDESCRIPTION[0m
       Shows the commit logs.

       List commits that are reachable by following the [1mparent [22mlinks from the given commit(s), but exclude commits that are reachable from the one(s) given with a [4m^[24m in front of them.
       The output is given in reverse chronological order by default.

       You can think of this as a set operation. Commits reachable from any of the commits given on the command line form a set, and then commits reachable from any of the ones given
       with [4m^[24m in front are subtracted from that set. The remaining commits are what comes out in the command‚Äôs output. Various other options and paths parameters can be used to
       further limit the result.

       Thus, the following command:

           $ git log foo bar ^baz

       means "list all the commits which are reachable from [4mfoo[24m or [4mbar[24m, but not from [4mbaz[24m".

       A special notation "[4m<commit1>[24m..[4m<commit2>[24m" can be used as a short-hand for "^[4m<commit1>[24m [4m<commit2>[24m". For example, either of the following may be used interchangeably:

           $ git log origin..HEAD
           $ git log HEAD ^origin

       Another special notation is "[4m<commit1>[24m...[4m<commit2>[24m" which is useful for merges. The resulting set of commits is the symmetric difference between the two operands. The following
       two commands are equivalent:

           $ git log A B --not $(git merge-base --all A B)
           $ git log A...B

       The command takes options applicable to the [1mgit-rev-list[22m(1) command to control what is shown and how, and options applicable to the [1mgit-diff[22m(1) command to control how the
       changes each commit introduces are shown.

[1mOPTIONS[0m
       --follow
           Continue listing the history of a file beyond renames (works only for a single file).

       --no-decorate, --decorate[=short|full|auto|no]
           Print out the ref names of any commits that are shown. If [4mshort[24m is specified, the ref name prefixes [4mrefs/heads/[24m, [4mrefs/tags/[24m and [4mrefs/remotes/[24m will not be printed. If [4mfull[0m
           is specified, the full ref name (including prefix) will be printed. If [4mauto[24m is specified, then if the output is going to a terminal, the ref names are shown as if [4mshort[0m
           were given, otherwise no ref names are shown. The option [1m--decorate [22mis short-hand for [1m--decorate=short[22m. Default to configuration value of [1mlog.decorate [22mif configured,
           otherwise, [1mauto[22m.

       --decorate-refs=<pattern>, --decorate-refs-exclude=<pattern>
           For each candidate reference, do not use it for decoration if it matches any patterns given to [1m--decorate-refs-exclude [22mor if it doesn‚Äôt match any of the patterns given to
           [1m--decorate-refs[22m. The [1mlog.excludeDecoration [22mconfig option allows excluding refs from the decorations, but an explicit [1m--decorate-refs [22mpattern will override a match in
           [1mlog.excludeDecoration[22m.

           If none of these options or config settings are given, then references are used as decoration if they match [1mHEAD[22m, [1mrefs/heads/[22m, [1mrefs/remotes/[22m, [1mrefs/stash/[22m, or [1mrefs/tags/[22m.

       --clear-decorations
           When specified, this option clears all previous [1m--decorate-refs [22mor [1m--decorate-refs-exclude [22moptions and relaxes the default decoration filter to include all references. This
           option is assumed if the config value [1mlog.initialDecorationSet [22mis set to [1mall[22m.

       --source
           Print out the ref name given on the command line by which each commit was reached.

       --[no-]mailmap, --[no-]use-mailmap
           Use mailmap file to map author and committer names and email addresses to canonical real names and email addresses. See [1mgit-shortlog[22m(1).

       --full-diff
           Without this flag, [1mgit log -p <path>...  [22mshows commits that touch the specified paths, and diffs about the same specified paths. With this, the full diff is shown for
           commits that touch the specified paths; this means that "<path>..." limits only commits, and doesn‚Äôt limit diff for those commits.

           Note that this affects all diff-based output types, e.g. those produced by [1m--stat[22m, etc.

       --log-size
           Include a line ‚Äúlog size <number>‚Äù in the output for each commit, where <number> is the length of that commit‚Äôs message in bytes. Intended to speed up tools that read log
           messages from [1mgit log [22moutput by allowing them to allocate space in advance.

       -L<start>,<end>:<file>, -L:<funcname>:<file>
           Trace the evolution of the line range given by [4m<start>,<end>[24m, or by the function name regex [4m<funcname>[24m, within the [4m<file>[24m. You may not give any pathspec limiters. This is
           currently limited to a walk starting from a single revision, i.e., you may only give zero or one positive revision arguments, and [4m<start>[24m and [4m<end>[24m (or [4m<funcname>[24m) must
           exist in the starting revision. You can specify this option more than once. Implies [1m--patch[22m. Patch output can be suppressed using [1m--no-patch[22m, but other diff formats (namely
           [1m--raw[22m, [1m--numstat[22m, [1m--shortstat[22m, [1m--dirstat[22m, [1m--summary[22m, [1m--name-only[22m, [1m--name-status[22m, [1m--check[22m) are not currently implemented.

           [4m<start>[24m and [4m<end>[24m can take one of these forms:

           ‚Ä¢   number

               If [4m<start>[24m or [4m<end>[24m is a number, it specifies an absolute line number (lines count from 1).

           ‚Ä¢   [1m/regex/[0m

               This form will use the first line matching the given POSIX regex. If [4m<start>[24m is a regex, it will search from the end of the previous [1m-L [22mrange, if any, otherwise from
               the start of file. If [4m<start>[24m is [1m^/regex/[22m, it will search from the start of file. If [4m<end>[24m is a regex, it will search starting at the line given by [4m<start>[24m.

           ‚Ä¢   +offset or -offset

               This is only valid for [4m<end>[24m and will specify a number of lines before or after the line given by [4m<start>[24m.

           If [1m:<funcname> [22mis given in place of [4m<start>[24m and [4m<end>[24m, it is a regular expression that denotes the range from the first funcname line that matches [4m<funcname>[24m, up to the
           next funcname line.  [1m:<funcname> [22msearches from the end of the previous [1m-L [22mrange, if any, otherwise from the start of file.  [1m^:<funcname> [22msearches from the start of file.
           The function names are determined in the same way as [1mgit diff [22mworks out patch hunk headers (see [4mDefining[24m [4ma[24m [4mcustom[24m [4mhunk-header[24m in [1mgitattributes[22m(5)).

       <revision-range>
           Show only commits in the specified revision range. When no <revision-range> is specified, it defaults to [1mHEAD [22m(i.e. the whole history leading to the current commit).
           [1morigin..HEAD [22mspecifies all the commits reachable from the current commit (i.e.  [1mHEAD[22m), but not from [1morigin[22m. For a complete list of ways to spell <revision-range>, see the
           [4mSpecifying[24m [4mRanges[24m section of [1mgitrevisions[22m(7).

       [--] <path>...
           Show only commits that are enough to explain how the files that match the specified paths came to be. See [4mHistory[24m [4mSimplification[24m below for details and other simplification
           modes.

           Paths may need to be prefixed with [1m-- [22mto separate them from options or the revision range, when confusion arises.

   [1mCommit Limiting[0m
       Besides specifying a range of commits that should be listed using the special notations explained in the description, additional commit limiting may be applied.

       Using more options generally further limits the output (e.g. [1m--since=<date1> [22mlimits to commits newer than [1m<date1>[22m, and using it with [1m--grep=<pattern> [22mfurther limits to commits
       whose log message has a line that matches [1m<pattern>[22m), unless otherwise noted.

       Note that these are applied before commit ordering and formatting options, such as [1m--reverse[22m.

       -<number>, -n <number>, --max-count=<number>
           Limit the number of commits to output.

       --skip=<number>
           Skip [4mnumber[24m commits before starting to show the commit output.

       --since=<date>, --after=<date>
           Show commits more recent than a specific date.

       --since-as-filter=<date>
           Show all commits more recent than a specific date. This visits all commits in the range, rather than stopping at the first commit which is older than a specific date.

       --until=<date>, --before=<date>
           Show commits older than a specific date.

       --author=<pattern>, --committer=<pattern>
           Limit the commits output to ones with author/committer header lines that match the specified pattern (regular expression). With more than one [1m--author=<pattern>[22m, commits
           whose author matches any of the given patterns are chosen (similarly for multiple [1m--committer=<pattern>[22m).

       --grep-reflog=<pattern>
           Limit the commits output to ones with reflog entries that match the specified pattern (regular expression). With more than one [1m--grep-reflog[22m, commits whose reflog message
           matches any of the given patterns are chosen. It is an error to use this option unless [1m--walk-reflogs [22mis in use.

       --grep=<pattern>
           Limit the commits output to ones with a log message that matches the specified pattern (regular expression). With more than one [1m--grep=<pattern>[22m, commits whose message
           matches any of the given patterns are chosen (but see [1m--all-match[22m).

           When [1m--notes [22mis in effect, the message from the notes is matched as if it were part of the log message.

       --all-match
           Limit the commits output to ones that match all given [1m--grep[22m, instead of ones that match at least one.

       --invert-grep
           Limit the commits output to ones with a log message that do not match the pattern specified with [1m--grep=<pattern>[22m.

       -i, --regexp-ignore-case
           Match the regular expression limiting patterns without regard to letter case.

       --basic-regexp
           Consider the limiting patterns to be basic regular expressions; this is the default.

       -E, --extended-regexp
           Consider the limiting patterns to be extended regular expressions instead of the default basic regular expressions.

       -F, --fixed-strings
           Consider the limiting patterns to be fixed strings (don‚Äôt interpret pattern as a regular expression).

       -P, --perl-regexp
           Consider the limiting patterns to be Perl-compatible regular expressions.

           Support for these types of regular expressions is an optional compile-time dependency. If Git wasn‚Äôt compiled with support for them providing this option will cause it to
           die.

       --remove-empty
           Stop when a given path disappears from the tree.

       --merges
           Print only merge commits. This is exactly the same as [1m--min-parents=2[22m.

       --no-merges
           Do not print commits with more than one parent. This is exactly the same as [1m--max-parents=1[22m.

       --min-parents=<number>, --max-parents=<number>, --no-min-parents, --no-max-parents
           Show only commits which have at least (or at most) that many parent commits. In particular, [1m--max-parents=1 [22mis the same as [1m--no-merges[22m, [1m--min-parents=2 [22mis the same as
           [1m--merges[22m.  [1m--max-parents=0 [22mgives all root commits and [1m--min-parents=3 [22mall octopus merges.

           [1m--no-min-parents [22mand [1m--no-max-parents [22mreset these limits (to no limit) again. Equivalent forms are [1m--min-parents=0 [22m(any commit has 0 or more parents) and [1m--max-parents=-1[0m
           (negative numbers denote no upper limit).

       --first-parent
           When finding commits to include, follow only the first parent commit upon seeing a merge commit. This option can give a better overview when viewing the evolution of a
           particular topic branch, because merges into a topic branch tend to be only about adjusting to updated upstream from time to time, and this option allows you to ignore the
           individual commits brought in to your history by such a merge.

           This option also changes default diff format for merge commits to [1mfirst-parent[22m, see [1m--diff-merges=first-parent [22mfor details.

       --exclude-first-parent-only
           When finding commits to exclude (with a [4m^[24m), follow only the first parent commit upon seeing a merge commit. This can be used to find the set of changes in a topic branch
           from the point where it diverged from the remote branch, given that arbitrary merges can be valid topic branch changes.

       --not
           Reverses the meaning of the [4m^[24m prefix (or lack thereof) for all following revision specifiers, up to the next [1m--not[22m. When used on the command line before --stdin, the
           revisions passed through stdin will not be affected by it. Conversely, when passed via standard input, the revisions passed on the command line will not be affected by it.

       --all
           Pretend as if all the refs in [1mrefs/[22m, along with [1mHEAD[22m, are listed on the command line as [4m<commit>[24m.

       --branches[=<pattern>]
           Pretend as if all the refs in [1mrefs/heads [22mare listed on the command line as [4m<commit>[24m. If [4m<pattern>[24m is given, limit branches to ones matching given shell glob. If pattern
           lacks [4m?[24m, [4m*[24m, or [4m[[24m, [4m/*[24m at the end is implied.

       --tags[=<pattern>]
           Pretend as if all the refs in [1mrefs/tags [22mare listed on the command line as [4m<commit>[24m. If [4m<pattern>[24m is given, limit tags to ones matching given shell glob. If pattern lacks [4m?[24m,
           [4m*[24m, or [4m[[24m, [4m/*[24m at the end is implied.

       --remotes[=<pattern>]
           Pretend as if all the refs in [1mrefs/remotes [22mare listed on the command line as [4m<commit>[24m. If [4m<pattern>[24m is given, limit remote-tracking branches to ones matching given shell
           glob. If pattern lacks [4m?[24m, [4m*[24m, or [4m[[24m, [4m/*[24m at the end is implied.

       --glob=<glob-pattern>
           Pretend as if all the refs matching shell glob [4m<glob-pattern>[24m are listed on the command line as [4m<commit>[24m. Leading [4mrefs/[24m, is automatically prepended if missing. If pattern
           lacks [4m?[24m, [4m*[24m, or [4m[[24m, [4m/*[24m at the end is implied.

       --exclude=<glob-pattern>
           Do not include refs matching [4m<glob-pattern>[24m that the next [1m--all[22m, [1m--branches[22m, [1m--tags[22m, [1m--remotes[22m, or [1m--glob [22mwould otherwise consider. Repetitions of this option accumulate
           exclusion patterns up to the next [1m--all[22m, [1m--branches[22m, [1m--tags[22m, [1m--remotes[22m, or [1m--glob [22moption (other options or arguments do not clear accumulated patterns).

           The patterns given should not begin with [1mrefs/heads[22m, [1mrefs/tags[22m, or [1mrefs/remotes [22mwhen applied to [1m--branches[22m, [1m--tags[22m, or [1m--remotes[22m, respectively, and they must begin with
           [1mrefs/ [22mwhen applied to [1m--glob [22mor [1m--all[22m. If a trailing [4m/*[24m is intended, it must be given explicitly.

       --exclude-hidden=[fetch|receive|uploadpack]
           Do not include refs that would be hidden by [1mgit-fetch[22m, [1mgit-receive-pack [22mor [1mgit-upload-pack [22mby consulting the appropriate [1mfetch.hideRefs[22m, [1mreceive.hideRefs [22mor
           [1muploadpack.hideRefs [22mconfiguration along with [1mtransfer.hideRefs [22m(see [1mgit-config[22m(1)). This option affects the next pseudo-ref option [1m--all [22mor [1m--glob [22mand is cleared after
           processing them.

       --reflog
           Pretend as if all objects mentioned by reflogs are listed on the command line as [1m<commit>[22m.

       --alternate-refs
           Pretend as if all objects mentioned as ref tips of alternate repositories were listed on the command line. An alternate repository is any repository whose object directory
           is specified in [1mobjects/info/alternates[22m. The set of included objects may be modified by [1mcore.alternateRefsCommand[22m, etc. See [1mgit-config[22m(1).

       --single-worktree
           By default, all working trees will be examined by the following options when there are more than one (see [1mgit-worktree[22m(1)): [1m--all[22m, [1m--reflog [22mand [1m--indexed-objects[22m. This
           option forces them to examine the current working tree only.

       --ignore-missing
           Upon seeing an invalid object name in the input, pretend as if the bad input was not given.

       --bisect
           Pretend as if the bad bisection ref [1mrefs/bisect/bad [22mwas listed and as if it was followed by [1m--not [22mand the good bisection refs [1mrefs/bisect/good-* [22mon the command line.

       --stdin
           In addition to getting arguments from the command line, read them from standard input as well. This accepts commits and pseudo-options like [1m--all [22mand [1m--glob=[22m. When a [1m--[0m
           separator is seen, the following input is treated as paths and used to limit the result. Flags like [1m--not [22mwhich are read via standard input are only respected for arguments
           passed in the same way and will not influence any subsequent command line arguments.

       --cherry-mark
           Like [1m--cherry-pick [22m(see below) but mark equivalent commits with [1m= [22mrather than omitting them, and inequivalent ones with [1m+[22m.

       --cherry-pick
           Omit any commit that introduces the same change as another commit on the ‚Äúother side‚Äù when the set of commits are limited with symmetric difference.

           For example, if you have two branches, [1mA [22mand [1mB[22m, a usual way to list all commits on only one side of them is with [1m--left-right [22m(see the example below in the description of
           the [1m--left-right [22moption). However, it shows the commits that were cherry-picked from the other branch (for example, ‚Äú3rd on b‚Äù may be cherry-picked from branch A). With
           this option, such pairs of commits are excluded from the output.

       --left-only, --right-only
           List only commits on the respective side of a symmetric difference, i.e. only those which would be marked [1m< [22mresp.  [1m> [22mby [1m--left-right[22m.

           For example, [1m--cherry-pick --right-only A...B [22momits those commits from [1mB [22mwhich are in [1mA [22mor are patch-equivalent to a commit in [1mA[22m. In other words, this lists the [1m+ [22mcommits
           from [1mgit cherry A B[22m. More precisely, [1m--cherry-pick --right-only --no-merges [22mgives the exact list.

       --cherry
           A synonym for [1m--right-only --cherry-mark --no-merges[22m; useful to limit the output to the commits on our side and mark those that have been applied to the other side of a
           forked history with [1mgit log --cherry upstream...mybranch[22m, similar to [1mgit cherry upstream mybranch[22m.

       -g, --walk-reflogs
           Instead of walking the commit ancestry chain, walk reflog entries from the most recent one to older ones. When this option is used you cannot specify commits to exclude
           (that is, [4m^commit[24m, [4mcommit1..commit2[24m, and [4mcommit1...commit2[24m notations cannot be used).

           With [1m--pretty [22mformat other than [1moneline [22mand [1mreference [22m(for obvious reasons), this causes the output to have two extra lines of information taken from the reflog. The reflog
           designator in the output may be shown as [1mref@{Nth} [22m(where [1mNth [22mis the reverse-chronological index in the reflog) or as [1mref@{timestamp} [22m(with the timestamp for that entry),
           depending on a few rules:

            1. If the starting point is specified as [1mref@{Nth}[22m, show the index format.

            2. If the starting point was specified as [1mref@{now}[22m, show the timestamp format.

            3. If neither was used, but [1m--date [22mwas given on the command line, show the timestamp in the format requested by [1m--date[22m.

            4. Otherwise, show the index format.

           Under [1m--pretty=oneline[22m, the commit message is prefixed with this information on the same line. This option cannot be combined with [1m--reverse[22m. See also [1mgit-reflog[22m(1).

           Under [1m--pretty=reference[22m, this information will not be shown at all.

       --merge
           After a failed merge, show refs that touch files having a conflict and don‚Äôt exist on all heads to merge.

       --boundary
           Output excluded boundary commits. Boundary commits are prefixed with [1m-[22m.

   [1mHistory Simplification[0m
       Sometimes you are only interested in parts of the history, for example the commits modifying a particular <path>. But there are two parts of [4mHistory[24m [4mSimplification[24m, one part is
       selecting the commits and the other is how to do it, as there are various strategies to simplify the history.

       The following options select the commits to be shown:

       <paths>
           Commits modifying the given <paths> are selected.

       --simplify-by-decoration
           Commits that are referred by some branch or tag are selected.

       Note that extra commits can be shown to give a meaningful history.

       The following options affect the way the simplification is performed:

       Default mode
           Simplifies the history to the simplest history explaining the final state of the tree. Simplest because it prunes some side branches if the end result is the same (i.e.
           merging branches with the same content)

       --show-pulls
           Include all commits from the default mode, but also any merge commits that are not TREESAME to the first parent but are TREESAME to a later parent. This mode is helpful for
           showing the merge commits that "first introduced" a change to a branch.

       --full-history
           Same as the default mode, but does not prune some history.

       --dense
           Only the selected commits are shown, plus some to have a meaningful history.

       --sparse
           All commits in the simplified history are shown.

       --simplify-merges
           Additional option to [1m--full-history [22mto remove some needless merges from the resulting history, as there are no selected commits contributing to this merge.

       --ancestry-path[=<commit>]
           When given a range of commits to display (e.g.  [4mcommit1..commit2[24m or [4mcommit2[24m [4m^commit1[24m), only display commits in that range that are ancestors of <commit>, descendants of
           <commit>, or <commit> itself. If no commit is specified, use [4mcommit1[24m (the excluded part of the range) as <commit>. Can be passed multiple times; if so, a commit is included
           if it is any of the commits given or if it is an ancestor or descendant of one of them.

       A more detailed explanation follows.

       Suppose you specified [1mfoo [22mas the <paths>. We shall call commits that modify [1mfoo [22m!TREESAME, and the rest TREESAME. (In a diff filtered for [1mfoo[22m, they look different and equal,
       respectively.)

       In the following, we will always refer to the same example history to illustrate the differences between simplification settings. We assume that you are filtering for a file
       [1mfoo [22min this commit graph:

                     .-A---M---N---O---P---Q
                    /     /   /   /   /   /
                   I     B   C   D   E   Y
                    \   /   /   /   /   /
                     `-------------'   X

       The horizontal line of history A---Q is taken to be the first parent of each merge. The commits are:

       ‚Ä¢   [1mI [22mis the initial commit, in which [1mfoo [22mexists with contents ‚Äúasdf‚Äù, and a file [1mquux [22mexists with contents ‚Äúquux‚Äù. Initial commits are compared to an empty tree, so [1mI [22mis
           !TREESAME.

       ‚Ä¢   In [1mA[22m, [1mfoo [22mcontains just ‚Äúfoo‚Äù.

       ‚Ä¢   [1mB [22mcontains the same change as [1mA[22m. Its merge [1mM [22mis trivial and hence TREESAME to all parents.

       ‚Ä¢   [1mC [22mdoes not change [1mfoo[22m, but its merge [1mN [22mchanges it to ‚Äúfoobar‚Äù, so it is not TREESAME to any parent.

       ‚Ä¢   [1mD [22msets [1mfoo [22mto ‚Äúbaz‚Äù. Its merge [1mO [22mcombines the strings from [1mN [22mand [1mD [22mto ‚Äúfoobarbaz‚Äù; i.e., it is not TREESAME to any parent.

       ‚Ä¢   [1mE [22mchanges [1mquux [22mto ‚Äúxyzzy‚Äù, and its merge [1mP [22mcombines the strings to ‚Äúquux xyzzy‚Äù.  [1mP [22mis TREESAME to [1mO[22m, but not to [1mE[22m.

       ‚Ä¢   [1mX [22mis an independent root commit that added a new file [1mside[22m, and [1mY [22mmodified it.  [1mY [22mis TREESAME to [1mX[22m. Its merge [1mQ [22madded [1mside [22mto [1mP[22m, and [1mQ [22mis TREESAME to [1mP[22m, but not to [1mY[22m.

       [1mrev-list [22mwalks backwards through history, including or excluding commits based on whether [1m--full-history [22mand/or parent rewriting (via [1m--parents [22mor [1m--children[22m) are used. The
       following settings are available.

       Default mode
           Commits are included if they are not TREESAME to any parent (though this can be changed, see [1m--sparse [22mbelow). If the commit was a merge, and it was TREESAME to one parent,
           follow only that parent. (Even if there are several TREESAME parents, follow only one of them.) Otherwise, follow all parents.

           This results in:

                         .-A---N---O
                        /     /   /
                       I---------D

           Note how the rule to only follow the TREESAME parent, if one is available, removed [1mB [22mfrom consideration entirely.  [1mC [22mwas considered via [1mN[22m, but is TREESAME. Root commits are
           compared to an empty tree, so [1mI [22mis !TREESAME.

           Parent/child relations are only visible with [1m--parents[22m, but that does not affect the commits selected in default mode, so we have shown the parent lines.

       --full-history without parent rewriting
           This mode differs from the default in one point: always follow all parents of a merge, even if it is TREESAME to one of them. Even if more than one side of the merge has
           commits that are included, this does not imply that the merge itself is! In the example, we get

                       I  A  B  N  D  O  P  Q

           [1mM [22mwas excluded because it is TREESAME to both parents.  [1mE[22m, [1mC [22mand [1mB [22mwere all walked, but only [1mB [22mwas !TREESAME, so the others do not appear.

           Note that without parent rewriting, it is not really possible to talk about the parent/child relationships between the commits, so we show them disconnected.

       --full-history with parent rewriting
           Ordinary commits are only included if they are !TREESAME (though this can be changed, see [1m--sparse [22mbelow).

           Merges are always included. However, their parent list is rewritten: Along each parent, prune away commits that are not included themselves. This results in

                         .-A---M---N---O---P---Q
                        /     /   /   /   /
                       I     B   /   D   /
                        \   /   /   /   /
                         `-------------'

           Compare to [1m--full-history [22mwithout rewriting above. Note that [1mE [22mwas pruned away because it is TREESAME, but the parent list of P was rewritten to contain [1mE[22m's parent [1mI[22m. The
           same happened for [1mC [22mand [1mN[22m, and [1mX[22m, [1mY [22mand [1mQ[22m.

       In addition to the above settings, you can change whether TREESAME affects inclusion:

       --dense
           Commits that are walked are included if they are not TREESAME to any parent.

       --sparse
           All commits that are walked are included.

           Note that without [1m--full-history[22m, this still simplifies merges: if one of the parents is TREESAME, we follow only that one, so the other sides of the merge are never
           walked.

       --simplify-merges
           First, build a history graph in the same way that [1m--full-history [22mwith parent rewriting does (see above).

           Then simplify each commit [1mC [22mto its replacement [1mC' [22min the final history according to the following rules:

           ‚Ä¢   Set [1mC' [22mto [1mC[22m.

           ‚Ä¢   Replace each parent [1mP [22mof [1mC' [22mwith its simplification [1mP'[22m. In the process, drop parents that are ancestors of other parents or that are root commits TREESAME to an empty
               tree, and remove duplicates, but take care to never drop all parents that we are TREESAME to.

           ‚Ä¢   If after this parent rewriting, [1mC' [22mis a root or merge commit (has zero or >1 parents), a boundary commit, or !TREESAME, it remains. Otherwise, it is replaced with its
               only parent.

           The effect of this is best shown by way of comparing to [1m--full-history [22mwith parent rewriting. The example turns into:

                         .-A---M---N---O
                        /     /       /
                       I     B       D
                        \   /       /
                         `---------'

           Note the major differences in [1mN[22m, [1mP[22m, and [1mQ [22mover [1m--full-history[22m:

           ‚Ä¢   [1mN[22m's parent list had [1mI [22mremoved, because it is an ancestor of the other parent [1mM[22m. Still, [1mN [22mremained because it is !TREESAME.

           ‚Ä¢   [1mP[22m's parent list similarly had [1mI [22mremoved.  [1mP [22mwas then removed completely, because it had one parent and is TREESAME.

           ‚Ä¢   [1mQ[22m's parent list had [1mY [22msimplified to [1mX[22m.  [1mX [22mwas then removed, because it was a TREESAME root.  [1mQ [22mwas then removed completely, because it had one parent and is TREESAME.

       There is another simplification mode available:

       --ancestry-path[=<commit>]
           Limit the displayed commits to those which are an ancestor of <commit>, or which are a descendant of <commit>, or are <commit> itself.

           As an example use case, consider the following commit history:

                           D---E-------F
                          /     \       \
                         B---C---G---H---I---J
                        /                     \
                       A-------K---------------L--M

           A regular [4mD..M[24m computes the set of commits that are ancestors of [1mM[22m, but excludes the ones that are ancestors of [1mD[22m. This is useful to see what happened to the history
           leading to [1mM [22msince [1mD[22m, in the sense that ‚Äúwhat does [1mM [22mhave that did not exist in [1mD[22m‚Äù. The result in this example would be all the commits, except [1mA [22mand [1mB [22m(and [1mD [22mitself, of
           course).

           When we want to find out what commits in [1mM [22mare contaminated with the bug introduced by [1mD [22mand need fixing, however, we might want to view only the subset of [4mD..M[24m that are
           actually descendants of [1mD[22m, i.e. excluding [1mC [22mand [1mK[22m. This is exactly what the [1m--ancestry-path [22moption does. Applied to the [4mD..M[24m range, it results in:

                               E-------F
                                \       \
                                 G---H---I---J
                                              \
                                               L--M

           We can also use [1m--ancestry-path=D [22minstead of [1m--ancestry-path [22mwhich means the same thing when applied to the [4mD..M[24m range but is just more explicit.

           If we instead are interested in a given topic within this range, and all commits affected by that topic, we may only want to view the subset of [1mD..M [22mwhich contain that
           topic in their ancestry path. So, using [1m--ancestry-path=H D..M [22mfor example would result in:

                               E
                                \
                                 G---H---I---J
                                              \
                                               L--M

           Whereas [1m--ancestry-path=K D..M [22mwould result in

                               K---------------L--M

       Before discussing another option, [1m--show-pulls[22m, we need to create a new example history.

       A common problem users face when looking at simplified history is that a commit they know changed a file somehow does not appear in the file‚Äôs simplified history. Let‚Äôs
       demonstrate a new example and show how options such as [1m--full-history [22mand [1m--simplify-merges [22mworks in that case:

                     .-A---M-----C--N---O---P
                    /     / \  \  \/   /   /
                   I     B   \  R-'`-Z'   /
                    \   /     \/         /
                     \ /      /\        /
                      `---X--'  `---Y--'

       For this example, suppose [1mI [22mcreated [1mfile.txt [22mwhich was modified by [1mA[22m, [1mB[22m, and [1mX [22min different ways. The single-parent commits [1mC[22m, [1mZ[22m, and [1mY [22mdo not change [1mfile.txt[22m. The merge commit
       [1mM [22mwas created by resolving the merge conflict to include both changes from [1mA [22mand [1mB [22mand hence is not TREESAME to either. The merge commit [1mR[22m, however, was created by ignoring the
       contents of [1mfile.txt [22mat [1mM [22mand taking only the contents of [1mfile.txt [22mat [1mX[22m. Hence, [1mR [22mis TREESAME to [1mX [22mbut not [1mM[22m. Finally, the natural merge resolution to create [1mN [22mis to take the
       contents of [1mfile.txt [22mat [1mR[22m, so [1mN [22mis TREESAME to [1mR [22mbut not [1mC[22m. The merge commits [1mO [22mand [1mP [22mare TREESAME to their first parents, but not to their second parents, [1mZ [22mand [1mY[0m
       respectively.

       When using the default mode, [1mN [22mand [1mR [22mboth have a TREESAME parent, so those edges are walked and the others are ignored. The resulting history graph is:

                   I---X

       When using [1m--full-history[22m, Git walks every edge. This will discover the commits [1mA [22mand [1mB [22mand the merge [1mM[22m, but also will reveal the merge commits [1mO [22mand [1mP[22m. With parent rewriting,
       the resulting graph is:

                     .-A---M--------N---O---P
                    /     / \  \  \/   /   /
                   I     B   \  R-'`--'   /
                    \   /     \/         /
                     \ /      /\        /
                      `---X--'  `------'

       Here, the merge commits [1mO [22mand [1mP [22mcontribute extra noise, as they did not actually contribute a change to [1mfile.txt[22m. They only merged a topic that was based on an older version of
       [1mfile.txt[22m. This is a common issue in repositories using a workflow where many contributors work in parallel and merge their topic branches along a single trunk: many unrelated
       merges appear in the [1m--full-history [22mresults.

       When using the [1m--simplify-merges [22moption, the commits [1mO [22mand [1mP [22mdisappear from the results. This is because the rewritten second parents of [1mO [22mand [1mP [22mare reachable from their first
       parents. Those edges are removed and then the commits look like single-parent commits that are TREESAME to their parent. This also happens to the commit [1mN[22m, resulting in a
       history view as follows:

                     .-A---M--.
                    /     /    \
                   I     B      R
                    \   /      /
                     \ /      /
                      `---X--'

       In this view, we see all of the important single-parent changes from [1mA[22m, [1mB[22m, and [1mX[22m. We also see the carefully-resolved merge [1mM [22mand the not-so-carefully-resolved merge [1mR[22m. This is
       usually enough information to determine why the commits [1mA [22mand [1mB [22m"disappeared" from history in the default view. However, there are a few issues with this approach.

       The first issue is performance. Unlike any previous option, the [1m--simplify-merges [22moption requires walking the entire commit history before returning a single result. This can
       make the option difficult to use for very large repositories.

       The second issue is one of auditing. When many contributors are working on the same repository, it is important which merge commits introduced a change into an important
       branch. The problematic merge [1mR [22mabove is not likely to be the merge commit that was used to merge into an important branch. Instead, the merge [1mN [22mwas used to merge [1mR [22mand [1mX [22minto
       the important branch. This commit may have information about why the change [1mX [22mcame to override the changes from [1mA [22mand [1mB [22min its commit message.

       --show-pulls
           In addition to the commits shown in the default history, show each merge commit that is not TREESAME to its first parent but is TREESAME to a later parent.

           When a merge commit is included by [1m--show-pulls[22m, the merge is treated as if it "pulled" the change from another branch. When using [1m--show-pulls [22mon this example (and no
           other options) the resulting graph is:

                       I---X---R---N

           Here, the merge commits [1mR [22mand [1mN [22mare included because they pulled the commits [1mX [22mand [1mR [22minto the base branch, respectively. These merges are the reason the commits [1mA [22mand [1mB [22mdo
           not appear in the default history.

           When [1m--show-pulls [22mis paired with [1m--simplify-merges[22m, the graph includes all of the necessary information:

                         .-A---M--.   N
                        /     /    \ /
                       I     B      R
                        \   /      /
                         \ /      /
                          `---X--'

           Notice that since [1mM [22mis reachable from [1mR[22m, the edge from [1mN [22mto [1mM [22mwas simplified away. However, [1mN [22mstill appears in the history as an important commit because it "pulled" the
           change [1mR [22minto the main branch.

       The [1m--simplify-by-decoration [22moption allows you to view only the big picture of the topology of the history, by omitting commits that are not referenced by tags. Commits are
       marked as !TREESAME (in other words, kept after history simplification rules described above) if (1) they are referenced by tags, or (2) they change the contents of the paths
       given on the command line. All other commits are marked as TREESAME (subject to be simplified away).

   [1mCommit Ordering[0m
       By default, the commits are shown in reverse chronological order.

       --date-order
           Show no parents before all of its children are shown, but otherwise show commits in the commit timestamp order.

       --author-date-order
           Show no parents before all of its children are shown, but otherwise show commits in the author timestamp order.

       --topo-order
           Show no parents before all of its children are shown, and avoid showing commits on multiple lines of history intermixed.

           For example, in a commit history like this:

                   ---1----2----4----7
                       \              \
                        3----5----6----8---

           where the numbers denote the order of commit timestamps, [1mgit rev-list [22mand friends with [1m--date-order [22mshow the commits in the timestamp order: 8 7 6 5 4 3 2 1.

           With [1m--topo-order[22m, they would show 8 6 5 3 7 4 2 1 (or 8 7 4 2 6 5 3 1); some older commits are shown before newer ones in order to avoid showing the commits from two
           parallel development track mixed together.

       --reverse
           Output the commits chosen to be shown (see Commit Limiting section above) in reverse order. Cannot be combined with [1m--walk-reflogs[22m.

   [1mObject Traversal[0m
       These options are mostly targeted for packing of Git repositories.

       --no-walk[=(sorted|unsorted)]
           Only show the given commits, but do not traverse their ancestors. This has no effect if a range is specified. If the argument [1munsorted [22mis given, the commits are shown in
           the order they were given on the command line. Otherwise (if [1msorted [22mor no argument was given), the commits are shown in reverse chronological order by commit time. Cannot
           be combined with [1m--graph[22m.

       --do-walk
           Overrides a previous [1m--no-walk[22m.

   [1mCommit Formatting[0m
       --pretty[=<format>], --format=<format>
           Pretty-print the contents of the commit logs in a given format, where [4m<format>[24m can be one of [4moneline[24m, [4mshort[24m, [4mmedium[24m, [4mfull[24m, [4mfuller[24m, [4mreference[24m, [4memail[24m, [4mraw[24m, [4mformat:<string>[0m
           and [4mtformat:<string>[24m. When [4m<format>[24m is none of the above, and has [4m%placeholder[24m in it, it acts as if [4m--pretty=tformat:<format>[24m were given.

           See the "PRETTY FORMATS" section for some additional details for each format. When [4m=<format>[24m part is omitted, it defaults to [4mmedium[24m.

           Note: you can specify the default pretty format in the repository configuration (see [1mgit-config[22m(1)).

       --abbrev-commit
           Instead of showing the full 40-byte hexadecimal commit object name, show a prefix that names the object uniquely. "--abbrev=<n>" (which also modifies diff output, if it is
           displayed) option can be used to specify the minimum length of the prefix.

           This should make "--pretty=oneline" a whole lot more readable for people using 80-column terminals.

       --no-abbrev-commit
           Show the full 40-byte hexadecimal commit object name. This negates [1m--abbrev-commit[22m, either explicit or implied by other options such as "--oneline". It also overrides the
           [1mlog.abbrevCommit [22mvariable.

       --oneline
           This is a shorthand for "--pretty=oneline --abbrev-commit" used together.

       --encoding=<encoding>
           Commit objects record the character encoding used for the log message in their encoding header; this option can be used to tell the command to re-code the commit log
           message in the encoding preferred by the user. For non plumbing commands this defaults to UTF-8. Note that if an object claims to be encoded in [1mX [22mand we are outputting in
           [1mX[22m, we will output the object verbatim; this means that invalid sequences in the original commit may be copied to the output. Likewise, if iconv(3) fails to convert the
           commit, we will quietly output the original object verbatim.

       --expand-tabs=<n>, --expand-tabs, --no-expand-tabs
           Perform a tab expansion (replace each tab with enough spaces to fill to the next display column that is a multiple of [4m<n>[24m) in the log message before showing it in the
           output.  [1m--expand-tabs [22mis a short-hand for [1m--expand-tabs=8[22m, and [1m--no-expand-tabs [22mis a short-hand for [1m--expand-tabs=0[22m, which disables tab expansion.

           By default, tabs are expanded in pretty formats that indent the log message by 4 spaces (i.e.  [4mmedium[24m, which is the default, [4mfull[24m, and [4mfuller[24m).

       --notes[=<ref>]
           Show the notes (see [1mgit-notes[22m(1)) that annotate the commit, when showing the commit log message. This is the default for [1mgit log[22m, [1mgit show [22mand [1mgit whatchanged [22mcommands when
           there is no [1m--pretty[22m, [1m--format[22m, or [1m--oneline [22moption given on the command line.

           By default, the notes shown are from the notes refs listed in the [1mcore.notesRef [22mand [1mnotes.displayRef [22mvariables (or corresponding environment overrides). See [1mgit-config[22m(1)
           for more details.

           With an optional [4m<ref>[24m argument, use the ref to find the notes to display. The ref can specify the full refname when it begins with [1mrefs/notes/[22m; when it begins with [1mnotes/[22m,
           [1mrefs/ [22mand otherwise [1mrefs/notes/ [22mis prefixed to form the full name of the ref.

           Multiple --notes options can be combined to control which notes are being displayed. Examples: "--notes=foo" will show only notes from "refs/notes/foo"; "--notes=foo
           --notes" will show both notes from "refs/notes/foo" and from the default notes ref(s).

       --no-notes
           Do not show notes. This negates the above [1m--notes [22moption, by resetting the list of notes refs from which notes are shown. Options are parsed in the order given on the
           command line, so e.g. "--notes --notes=foo --no-notes --notes=bar" will only show notes from "refs/notes/bar".

       --show-notes-by-default
           Show the default notes unless options for displaying specific notes are given.

       --show-notes[=<ref>], --[no-]standard-notes
           These options are deprecated. Use the above --notes/--no-notes options instead.

       --show-signature
           Check the validity of a signed commit object by passing the signature to [1mgpg --verify [22mand show the output.

       --relative-date
           Synonym for [1m--date=relative[22m.

       --date=<format>
           Only takes effect for dates shown in human-readable format, such as when using [1m--pretty[22m.  [1mlog.date [22mconfig variable sets a default value for the log command‚Äôs [1m--date [22moption.
           By default, dates are shown in the original time zone (either committer‚Äôs or author‚Äôs). If [1m-local [22mis appended to the format (e.g., [1miso-local[22m), the user‚Äôs local time zone is
           used instead.

           [1m--date=relative [22mshows dates relative to the current time, e.g. ‚Äú2 hours ago‚Äù. The [1m-local [22moption has no effect for [1m--date=relative[22m.

           [1m--date=local [22mis an alias for [1m--date=default-local[22m.

           [1m--date=iso [22m(or [1m--date=iso8601[22m) shows timestamps in a ISO 8601-like format. The differences to the strict ISO 8601 format are:

           ‚Ä¢   a space instead of the [1mT [22mdate/time delimiter

           ‚Ä¢   a space between time and time zone

           ‚Ä¢   no colon between hours and minutes of the time zone

           [1m--date=iso-strict [22m(or [1m--date=iso8601-strict[22m) shows timestamps in strict ISO 8601 format.

           [1m--date=rfc [22m(or [1m--date=rfc2822[22m) shows timestamps in RFC 2822 format, often found in email messages.

           [1m--date=short [22mshows only the date, but not the time, in [1mYYYY-MM-DD [22mformat.

           [1m--date=raw [22mshows the date as seconds since the epoch (1970-01-01 00:00:00 UTC), followed by a space, and then the timezone as an offset from UTC (a [1m+ [22mor [1m- [22mwith four digits;
           the first two are hours, and the second two are minutes). I.e., as if the timestamp were formatted with [1mstrftime("%s %z")[22m). Note that the [1m-local [22moption does not affect the
           seconds-since-epoch value (which is always measured in UTC), but does switch the accompanying timezone value.

           [1m--date=human [22mshows the timezone if the timezone does not match the current time-zone, and doesn‚Äôt print the whole date if that matches (ie skip printing year for dates that
           are "this year", but also skip the whole date itself if it‚Äôs in the last few days and we can just say what weekday it was). For older dates the hour and minute is also
           omitted.

           [1m--date=unix [22mshows the date as a Unix epoch timestamp (seconds since 1970). As with [1m--raw[22m, this is always in UTC and therefore [1m-local [22mhas no effect.

           [1m--date=format:...  [22mfeeds the format [1m...  [22mto your system [1mstrftime[22m, except for %s, %z, and %Z, which are handled internally. Use [1m--date=format:%c [22mto show the date in your
           system locale‚Äôs preferred format. See the [1mstrftime [22mmanual for a complete list of format placeholders. When using [1m-local[22m, the correct syntax is [1m--date=format-local:...[22m.

           [1m--date=default [22mis the default format, and is based on ctime(3) output. It shows a single line with three-letter day of the week, three-letter month, day-of-month,
           hour-minute-seconds in "HH:MM:SS" format, followed by 4-digit year, plus timezone information, unless the local time zone is used, e.g.  [1mThu Jan 1 00:00:00 1970 +0000[22m.

       --parents
           Print also the parents of the commit (in the form "commit parent..."). Also enables parent rewriting, see [4mHistory[24m [4mSimplification[24m above.

       --children
           Print also the children of the commit (in the form "commit child..."). Also enables parent rewriting, see [4mHistory[24m [4mSimplification[24m above.

       --left-right
           Mark which side of a symmetric difference a commit is reachable from. Commits from the left side are prefixed with [1m< [22mand those from the right with [1m>[22m. If combined with
           [1m--boundary[22m, those commits are prefixed with [1m-[22m.

           For example, if you have this topology:

                            y---b---b  branch B
                           / \ /
                          /   .
                         /   / \
                        o---x---a---a  branch A

           you would get an output like this:

                       $ git rev-list --left-right --boundary --pretty=oneline A...B

                       >bbbbbbb... 3rd on b
                       >bbbbbbb... 2nd on b
                       <aaaaaaa... 3rd on a
                       <aaaaaaa... 2nd on a
                       -yyyyyyy... 1st on b
                       -xxxxxxx... 1st on a

       --graph
           Draw a text-based graphical representation of the commit history on the left hand side of the output. This may cause extra lines to be printed in between commits, in order
           for the graph history to be drawn properly. Cannot be combined with [1m--no-walk[22m.

           This enables parent rewriting, see [4mHistory[24m [4mSimplification[24m above.

           This implies the [1m--topo-order [22moption by default, but the [1m--date-order [22moption may also be specified.

       --show-linear-break[=<barrier>]
           When --graph is not used, all history branches are flattened which can make it hard to see that the two consecutive commits do not belong to a linear branch. This option
           puts a barrier in between them in that case. If [1m<barrier> [22mis specified, it is the string that will be shown instead of the default one.

[1mPRETTY FORMATS[0m
       If the commit is a merge, and if the pretty-format is not [4moneline[24m, [4memail[24m or [4mraw[24m, an additional line is inserted before the [4mAuthor:[24m line. This line begins with "Merge: " and the
       hashes of ancestral commits are printed, separated by spaces. Note that the listed commits may not necessarily be the list of the [1mdirect [22mparent commits if you have limited your
       view of history: for example, if you are only interested in changes related to a certain directory or file.

       There are several built-in formats, and you can define additional formats by setting a pretty.<name> config option to either another format name, or a [4mformat:[24m string, as
       described below (see [1mgit-config[22m(1)). Here are the details of the built-in formats:

       ‚Ä¢   [4moneline[0m

               <hash> <title-line>

           This is designed to be as compact as possible.

       ‚Ä¢   [4mshort[0m

               commit <hash>
               Author: <author>

               <title-line>

       ‚Ä¢   [4mmedium[0m

               commit <hash>
               Author: <author>
               Date:   <author-date>

               <title-line>

               <full-commit-message>

       ‚Ä¢   [4mfull[0m

               commit <hash>
               Author: <author>
               Commit: <committer>

               <title-line>

               <full-commit-message>

       ‚Ä¢   [4mfuller[0m

               commit <hash>
               Author:     <author>
               AuthorDate: <author-date>
               Commit:     <committer>
               CommitDate: <committer-date>

               <title-line>

               <full-commit-message>

       ‚Ä¢   [4mreference[0m

               <abbrev-hash> (<title-line>, <short-author-date>)

           This format is used to refer to another commit in a commit message and is the same as [1m--pretty='format:%C(auto)%h (%s, %ad)'[22m. By default, the date is formatted with
           [1m--date=short [22munless another [1m--date [22moption is explicitly specified. As with any [1mformat: [22mwith format placeholders, its output is not affected by other options like [1m--decorate[0m
           and [1m--walk-reflogs[22m.

       ‚Ä¢   [4memail[0m

               From <hash> <date>
               From: <author>
               Date: <author-date>
               Subject: [PATCH] <title-line>

               <full-commit-message>

       ‚Ä¢   [4mmboxrd[0m

           Like [4memail[24m, but lines in the commit message starting with "From " (preceded by zero or more ">") are quoted with ">" so they aren‚Äôt confused as starting a new commit.

       ‚Ä¢   [4mraw[0m

           The [4mraw[24m format shows the entire commit exactly as stored in the commit object. Notably, the hashes are displayed in full, regardless of whether --abbrev or --no-abbrev are
           used, and [4mparents[24m information show the true parent commits, without taking grafts or history simplification into account. Note that this format affects the way commits are
           displayed, but not the way the diff is shown e.g. with [1mgit log --raw[22m. To get full object names in a raw diff format, use [1m--no-abbrev[22m.

       ‚Ä¢   [4mformat:<format-string>[0m

           The [4mformat:<format-string>[24m format allows you to specify which information you want to show. It works a little bit like printf format, with the notable exception that you
           get a newline with [4m%n[24m instead of [4m\n[24m.

           E.g, [4mformat:"The[24m [4mauthor[24m [4mof[24m [4m%h[24m [4mwas[24m [4m%an,[24m [4m%ar%nThe[24m [4mtitle[24m [4mwas[24m [4m>>%s<<%n"[24m would show something like this:

               The author of fe6e0ee was Junio C Hamano, 23 hours ago
               The title was >>t4119: test autocomputing -p<n> for traditional diff input.<<

           The placeholders are:

           ‚Ä¢   Placeholders that expand to a single literal character:

               [4m%n[0m
                   newline

               [4m%%[0m
                   a raw [4m%[0m

               [4m%x00[0m
                   [4m%x[24m followed by two hexadecimal digits is replaced with a byte with the hexadecimal digits' value (we will call this "literal formatting code" in the rest of this
                   document).

           ‚Ä¢   Placeholders that affect formatting of later placeholders:

               [4m%Cred[0m
                   switch color to red

               [4m%Cgreen[0m
                   switch color to green

               [4m%Cblue[0m
                   switch color to blue

               [4m%Creset[0m
                   reset color

               [4m%C(...)[0m
                   color specification, as described under Values in the "CONFIGURATION FILE" section of [1mgit-config[22m(1). By default, colors are shown only when enabled for log output
                   (by [1mcolor.diff[22m, [1mcolor.ui[22m, or [1m--color[22m, and respecting the [1mauto [22msettings of the former if we are going to a terminal).  [1m%C(auto,...)  [22mis accepted as a historical
                   synonym for the default (e.g., [1m%C(auto,red)[22m). Specifying [1m%C(always,...)  [22mwill show the colors even when color is not otherwise enabled (though consider just using
                   [1m--color=always [22mto enable color for the whole output, including this format and anything else git might color).  [1mauto [22malone (i.e.  [1m%C(auto)[22m) will turn on auto
                   coloring on the next placeholders until the color is switched again.

               [4m%m[0m
                   left ([1m<[22m), right ([1m>[22m) or boundary ([1m-[22m) mark

               [4m%w([<w>[,<i1>[,<i2>]]])[0m
                   switch line wrapping, like the -w option of [1mgit-shortlog[22m(1).

               [4m%<([24m [4m<N>[24m [4m[,trunc|ltrunc|mtrunc])[0m
                   make the next placeholder take at least N column widths, padding spaces on the right if necessary. Optionally truncate (with ellipsis [4m..[24m) at the left (ltrunc) [1m..ft[22m,
                   the middle (mtrunc) [1mmi..le[22m, or the end (trunc) [1mrig..[22m, if the output is longer than N columns. Note 1: that truncating only works correctly with N >= 2. Note 2:
                   spaces around the N and M (see below) values are optional. Note 3: Emojis and other wide characters will take two display columns, which may over-run column
                   boundaries. Note 4: decomposed character combining marks may be misplaced at padding boundaries.

               [4m%<|([24m [4m<M>[24m [4m)[0m
                   make the next placeholder take at least until Mth display column, padding spaces on the right if necessary. Use negative M values for column positions measured from
                   the right hand edge of the terminal window.

               [4m%>([24m [4m<N>[24m [4m)[24m, [4m%>|([24m [4m<M>[24m [4m)[0m
                   similar to [4m%<([24m [4m<N>[24m [4m)[24m, [4m%<|([24m [4m<M>[24m [4m)[24m respectively, but padding spaces on the left

               [4m%>>([24m [4m<N>[24m [4m)[24m, [4m%>>|([24m [4m<M>[24m [4m)[0m
                   similar to [4m%>([24m [4m<N>[24m [4m)[24m, [4m%>|([24m [4m<M>[24m [4m)[24m respectively, except that if the next placeholder takes more spaces than given and there are spaces on its left, use those spaces

               [4m%><([24m [4m<N>[24m [4m)[24m, [4m%><|([24m [4m<M>[24m [4m)[0m
                   similar to [4m%<([24m [4m<N>[24m [4m)[24m, [4m%<|([24m [4m<M>[24m [4m)[24m respectively, but padding both sides (i.e. the text is centered)

           ‚Ä¢   Placeholders that expand to information extracted from the commit:

               [4m%H[0m
                   commit hash

               [4m%h[0m
                   abbreviated commit hash

               [4m%T[0m
                   tree hash

               [4m%t[0m
                   abbreviated tree hash

               [4m%P[0m
                   parent hashes

               [4m%p[0m
                   abbreviated parent hashes

               [4m%an[0m
                   author name

               [4m%aN[0m
                   author name (respecting .mailmap, see [1mgit-shortlog[22m(1) or [1mgit-blame[22m(1))

               [4m%ae[0m
                   author email

               [4m%aE[0m
                   author email (respecting .mailmap, see [1mgit-shortlog[22m(1) or [1mgit-blame[22m(1))

               [4m%al[0m
                   author email local-part (the part before the [4m@[24m sign)

               [4m%aL[0m
                   author local-part (see [4m%al[24m) respecting .mailmap, see [1mgit-shortlog[22m(1) or [1mgit-blame[22m(1))

               [4m%ad[0m
                   author date (format respects --date= option)

               [4m%aD[0m
                   author date, RFC2822 style

               [4m%ar[0m
                   author date, relative

               [4m%at[0m
                   author date, UNIX timestamp

               [4m%ai[0m
                   author date, ISO 8601-like format

               [4m%aI[0m
                   author date, strict ISO 8601 format

               [4m%as[0m
                   author date, short format ([1mYYYY-MM-DD[22m)

               [4m%ah[0m
                   author date, human style (like the [1m--date=human [22moption of [1mgit-rev-list[22m(1))

               [4m%cn[0m
                   committer name

               [4m%cN[0m
                   committer name (respecting .mailmap, see [1mgit-shortlog[22m(1) or [1mgit-blame[22m(1))

               [4m%ce[0m
                   committer email

               [4m%cE[0m
                   committer email (respecting .mailmap, see [1mgit-shortlog[22m(1) or [1mgit-blame[22m(1))

               [4m%cl[0m
                   committer email local-part (the part before the [4m@[24m sign)

               [4m%cL[0m
                   committer local-part (see [4m%cl[24m) respecting .mailmap, see [1mgit-shortlog[22m(1) or [1mgit-blame[22m(1))

               [4m%cd[0m
                   committer date (format respects --date= option)

               [4m%cD[0m
                   committer date, RFC2822 style

               [4m%cr[0m
                   committer date, relative

               [4m%ct[0m
                   committer date, UNIX timestamp

               [4m%ci[0m
                   committer date, ISO 8601-like format

               [4m%cI[0m
                   committer date, strict ISO 8601 format

               [4m%cs[0m
                   committer date, short format ([1mYYYY-MM-DD[22m)

               [4m%ch[0m
                   committer date, human style (like the [1m--date=human [22moption of [1mgit-rev-list[22m(1))

               [4m%d[0m
                   ref names, like the --decorate option of [1mgit-log[22m(1)

               [4m%D[0m
                   ref names without the " (", ")" wrapping.

               [4m%(decorate[:<options>])[0m
                   ref names with custom decorations. The [1mdecorate [22mstring may be followed by a colon and zero or more comma-separated options. Option values may contain literal
                   formatting codes. These must be used for commas ([1m%x2C[22m) and closing parentheses ([1m%x29[22m), due to their role in the option syntax.

                   ‚Ä¢   [4mprefix=<value>[24m: Shown before the list of ref names. Defaults to " [1m([22m".

                   ‚Ä¢   [4msuffix=<value>[24m: Shown after the list of ref names. Defaults to "[1m)[22m".

                   ‚Ä¢   [4mseparator=<value>[24m: Shown between ref names. Defaults to "[1m, [22m".

                   ‚Ä¢   [4mpointer=<value>[24m: Shown between HEAD and the branch it points to, if any. Defaults to " [1m-> [22m".

                   ‚Ä¢   [4mtag=<value>[24m: Shown before tag names. Defaults to "[1mtag: [22m".

                   For example, to produce decorations with no wrapping or tag annotations, and spaces as separators:

                   [1m%(decorate:prefix=,suffix=,tag=,separator= )[0m

               [4m%(describe[:<options>])[0m
                   human-readable name, like [1mgit-describe[22m(1); empty string for undescribable commits. The [1mdescribe [22mstring may be followed by a colon and zero or more comma-separated
                   options. Descriptions can be inconsistent when tags are added or removed at the same time.

                   ‚Ä¢   [4mtags[=<bool-value>][24m: Instead of only considering annotated tags, consider lightweight tags as well.

                   ‚Ä¢   [4mabbrev=<number>[24m: Instead of using the default number of hexadecimal digits (which will vary according to the number of objects in the repository with a default
                       of 7) of the abbreviated object name, use <number> digits, or as many digits as needed to form a unique object name.

                   ‚Ä¢   [4mmatch=<pattern>[24m: Only consider tags matching the given [1mglob(7) [22mpattern, excluding the "refs/tags/" prefix.

                   ‚Ä¢   [4mexclude=<pattern>[24m: Do not consider tags matching the given [1mglob(7) [22mpattern, excluding the "refs/tags/" prefix.

               [4m%S[0m
                   ref name given on the command line by which the commit was reached (like [1mgit log --source[22m), only works with [1mgit log[0m

               [4m%e[0m
                   encoding

               [4m%s[0m
                   subject

               [4m%f[0m
                   sanitized subject line, suitable for a filename

               [4m%b[0m
                   body

               [4m%B[0m
                   raw body (unwrapped subject and body)

               [4m%N[0m
                   commit notes

               [4m%GG[0m
                   raw verification message from GPG for a signed commit

               [4m%G?[0m
                   show "G" for a good (valid) signature, "B" for a bad signature, "U" for a good signature with unknown validity, "X" for a good signature that has expired, "Y" for a
                   good signature made by an expired key, "R" for a good signature made by a revoked key, "E" if the signature cannot be checked (e.g. missing key) and "N" for no
                   signature

               [4m%GS[0m
                   show the name of the signer for a signed commit

               [4m%GK[0m
                   show the key used to sign a signed commit

               [4m%GF[0m
                   show the fingerprint of the key used to sign a signed commit

               [4m%GP[0m
                   show the fingerprint of the primary key whose subkey was used to sign a signed commit

               [4m%GT[0m
                   show the trust level for the key used to sign a signed commit

               [4m%gD[0m
                   reflog selector, e.g., [1mrefs/stash@{1} [22mor [1mrefs/stash@{2 minutes ago}[22m; the format follows the rules described for the [1m-g [22moption. The portion before the [1m@ [22mis the
                   refname as given on the command line (so [1mgit log -g refs/heads/master [22mwould yield [1mrefs/heads/master@{0}[22m).

               [4m%gd[0m
                   shortened reflog selector; same as [1m%gD[22m, but the refname portion is shortened for human readability (so [1mrefs/heads/master [22mbecomes just [1mmaster[22m).

               [4m%gn[0m
                   reflog identity name

               [4m%gN[0m
                   reflog identity name (respecting .mailmap, see [1mgit-shortlog[22m(1) or [1mgit-blame[22m(1))

               [4m%ge[0m
                   reflog identity email

               [4m%gE[0m
                   reflog identity email (respecting .mailmap, see [1mgit-shortlog[22m(1) or [1mgit-blame[22m(1))

               [4m%gs[0m
                   reflog subject

               [4m%(trailers[:<options>])[0m
                   display the trailers of the body as interpreted by [1mgit-interpret-trailers[22m(1). The [1mtrailers [22mstring may be followed by a colon and zero or more comma-separated
                   options. If any option is provided multiple times, the last occurrence wins.

                   ‚Ä¢   [4mkey=<key>[24m: only show trailers with specified <key>. Matching is done case-insensitively and trailing colon is optional. If option is given multiple times
                       trailer lines matching any of the keys are shown. This option automatically enables the [1monly [22moption so that non-trailer lines in the trailer block are hidden.
                       If that is not desired it can be disabled with [1monly=false[22m. E.g., [1m%(trailers:key=Reviewed-by) [22mshows trailer lines with key [1mReviewed-by[22m.

                   ‚Ä¢   [4monly[=<bool>][24m: select whether non-trailer lines from the trailer block should be included.

                   ‚Ä¢   [4mseparator=<sep>[24m: specify a separator inserted between trailer lines. When this option is not given each trailer line is terminated with a line feed character.
                       The string <sep> may contain the literal formatting codes described above. To use comma as separator one must use [1m%x2C [22mas it would otherwise be parsed as next
                       option. E.g., [1m%(trailers:key=Ticket,separator=%x2C ) [22mshows all trailer lines whose key is "Ticket" separated by a comma and a space.

                   ‚Ä¢   [4munfold[=<bool>][24m: make it behave as if interpret-trailer‚Äôs [1m--unfold [22moption was given. E.g., [1m%(trailers:only,unfold=true) [22munfolds and shows all trailer lines.

                   ‚Ä¢   [4mkeyonly[=<bool>][24m: only show the key part of the trailer.

                   ‚Ä¢   [4mvalueonly[=<bool>][24m: only show the value part of the trailer.

                   ‚Ä¢   [4mkey_value_separator=<sep>[24m: specify a separator inserted between trailer lines. When this option is not given each trailer key-value pair is separated by ": ".
                       Otherwise it shares the same semantics as [4mseparator=<sep>[24m above.

           [1mNote[0m

           Some placeholders may depend on other options given to the revision traversal engine. For example, the [1m%g* [22mreflog options will insert an empty string unless we are
           traversing reflog entries (e.g., by [1mgit log -g[22m). The [1m%d [22mand [1m%D [22mplaceholders will use the "short" decoration format if [1m--decorate [22mwas not already provided on the command
           line.

       The boolean options accept an optional value [1m[=<bool-value>][22m. The values [1mtrue[22m, [1mfalse[22m, [1mon[22m, [1moff [22metc. are all accepted. See the "boolean" sub-section in "EXAMPLES" in [1mgit-[0m
       [1mconfig[22m(1). If a boolean option is given with no value, it‚Äôs enabled.

       If you add a [1m+ [22m(plus sign) after [4m%[24m of a placeholder, a line-feed is inserted immediately before the expansion if and only if the placeholder expands to a non-empty string.

       If you add a [1m- [22m(minus sign) after [4m%[24m of a placeholder, all consecutive line-feeds immediately preceding the expansion are deleted if and only if the placeholder expands to an
       empty string.

       If you add a ` ` (space) after [4m%[24m of a placeholder, a space is inserted immediately before the expansion if and only if the placeholder expands to a non-empty string.

       ‚Ä¢   [4mtformat:[0m

           The [4mtformat:[24m format works exactly like [4mformat:[24m, except that it provides "terminator" semantics instead of "separator" semantics. In other words, each commit has the message
           terminator character (usually a newline) appended, rather than a separator placed between entries. This means that the final entry of a single-line format will be properly
           terminated with a new line, just as the "oneline" format does. For example:

               $ git log -2 --pretty=format:%h 4da45bef \
                 | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
               4da45be
               7134973 -- NO NEWLINE

               $ git log -2 --pretty=tformat:%h 4da45bef \
                 | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
               4da45be
               7134973

           In addition, any unrecognized string that has a [1m% [22min it is interpreted as if it has [1mtformat: [22min front of it. For example, these two are equivalent:

               $ git log -2 --pretty=tformat:%h 4da45bef
               $ git log -2 --pretty=%h 4da45bef

[1mDIFF FORMATTING[0m
       By default, [1mgit log [22mdoes not generate any diff output. The options below can be used to show the changes made by each commit.

       Note that unless one of [1m--diff-merges [22mvariants (including short [1m-m[22m, [1m-c[22m, [1m--cc[22m, and [1m--dd [22moptions) is explicitly given, merge commits will not show a diff, even if a diff format
       like [1m--patch [22mis selected, nor will they match search options like [1m-S[22m. The exception is when [1m--first-parent [22mis in use, in which case [1mfirst-parent [22mis the default format for merge
       commits.

       -p, -u, --patch
           Generate patch (see the section called ‚ÄúGENERATING PATCH TEXT WITH -P‚Äù).

       -s, --no-patch
           Suppress all output from the diff machinery. Useful for commands like [1mgit show [22mthat show the patch by default to squelch their output, or to cancel the effect of options
           like [1m--patch[22m, [1m--stat [22mearlier on the command line in an alias.

       -m
           Show diffs for merge commits in the default format. This is similar to [4m--diff-merges=on[24m, except [1m-m [22mwill produce no output unless [1m-p [22mis given as well.

       -c
           Produce combined diff output for merge commits. Shortcut for [4m--diff-merges=combined[24m [4m-p[24m.

       --cc
           Produce dense combined diff output for merge commits. Shortcut for [4m--diff-merges=dense-combined[24m [4m-p[24m.

       --dd
           Produce diff with respect to first parent for both merge and regular commits. Shortcut for [4m--diff-merges=first-parent[24m [4m-p[24m.

       --remerge-diff
           Produce remerge-diff output for merge commits. Shortcut for [4m--diff-merges=remerge[24m [4m-p[24m.

       --no-diff-merges
           Synonym for [4m--diff-merges=off[24m.

       --diff-merges=<format>
           Specify diff format to be used for merge commits. Default is [1moff [22munless [1m--first-parent [22mis in use, in which case [1mfirst-parent [22mis the default.

           The following formats are supported:

           off, none
               Disable output of diffs for merge commits. Useful to override implied value.

           on, m
               Make diff output for merge commits to be shown in the default format. The default format can be changed using [1mlog.diffMerges [22mconfiguration variable, whose default value
               is [1mseparate[22m.

           first-parent, 1
               Show full diff with respect to first parent. This is the same format as [1m--patch [22mproduces for non-merge commits.

           separate
               Show full diff with respect to each of parents. Separate log entry and diff is generated for each parent.

           combined, c
               Show differences from each of the parents to the merge result simultaneously instead of showing pairwise diff between a parent and the result one at a time.
               Furthermore, it lists only files which were modified from all parents.

           dense-combined, cc
               Further compress output produced by [1m--diff-merges=combined [22mby omitting uninteresting hunks whose contents in the parents have only two variants and the merge result
               picks one of them without modification.

           remerge, r
               Remerge two-parent merge commits to create a temporary tree object‚Äîpotentially containing files with conflict markers and such. A diff is then shown between that
               temporary tree and the actual merge commit.

               The output emitted when this option is used is subject to change, and so is its interaction with other options (unless explicitly documented).

       --combined-all-paths
           This flag causes combined diffs (used for merge commits) to list the name of the file from all parents. It thus only has effect when [1m--diff-merges=[dense-]combined [22mis in
           use, and is likely only useful if filename changes are detected (i.e. when either rename or copy detection have been requested).

       -U<n>, --unified=<n>
           Generate diffs with <n> lines of context instead of the usual three. Implies [1m--patch[22m.

       --output=<file>
           Output to a specific file instead of stdout.

       --output-indicator-new=<char>, --output-indicator-old=<char>, --output-indicator-context=<char>
           Specify the character used to indicate new, old or context lines in the generated patch. Normally they are [4m+[24m, [4m-[24m and ' ' respectively.

       --raw
           For each commit, show a summary of changes using the raw diff format. See the "RAW OUTPUT FORMAT" section of [1mgit-diff[22m(1). This is different from showing the log itself in
           raw format, which you can achieve with [1m--format=raw[22m.

       --patch-with-raw
           Synonym for [1m-p --raw[22m.

       -t
           Show the tree objects in the diff output.

       --indent-heuristic
           Enable the heuristic that shifts diff hunk boundaries to make patches easier to read. This is the default.

       --no-indent-heuristic
           Disable the indent heuristic.

       --minimal
           Spend extra time to make sure the smallest possible diff is produced.

       --patience
           Generate a diff using the "patience diff" algorithm.

       --histogram
           Generate a diff using the "histogram diff" algorithm.

       --anchored=<text>
           Generate a diff using the "anchored diff" algorithm.

           This option may be specified more than once.

           If a line exists in both the source and destination, exists only once, and starts with this text, this algorithm attempts to prevent it from appearing as a deletion or
           addition in the output. It uses the "patience diff" algorithm internally.

       --diff-algorithm={patience|minimal|histogram|myers}
           Choose a diff algorithm. The variants are as follows:

           [1mdefault[22m, [1mmyers[0m
               The basic greedy diff algorithm. Currently, this is the default.

           [1mminimal[0m
               Spend extra time to make sure the smallest possible diff is produced.

           [1mpatience[0m
               Use "patience diff" algorithm when generating patches.

           [1mhistogram[0m
               This algorithm extends the patience algorithm to "support low-occurrence common elements".

           For instance, if you configured the [1mdiff.algorithm [22mvariable to a non-default value and want to use the default one, then you have to use [1m--diff-algorithm=default [22moption.

       --stat[=<width>[,<name-width>[,<count>]]]
           Generate a diffstat. By default, as much space as necessary will be used for the filename part, and the rest for the graph part. Maximum width defaults to terminal width,
           or 80 columns if not connected to a terminal, and can be overridden by [1m<width>[22m. The width of the filename part can be limited by giving another width [1m<name-width> [22mafter a
           comma or by setting [1mdiff.statNameWidth=<width>[22m. The width of the graph part can be limited by using [1m--stat-graph-width=<width> [22mor by setting [1mdiff.statGraphWidth=<width>[22m.
           Using [1m--stat [22mor [1m--stat-graph-width [22maffects all commands generating a stat graph, while setting [1mdiff.statNameWidth [22mor [1mdiff.statGraphWidth [22mdoes not affect [1mgit format-patch[22m.
           By giving a third parameter [1m<count>[22m, you can limit the output to the first [1m<count> [22mlines, followed by [1m...  [22mif there are more.

           These parameters can also be set individually with [1m--stat-width=<width>[22m, [1m--stat-name-width=<name-width> [22mand [1m--stat-count=<count>[22m.

       --compact-summary
           Output a condensed summary of extended header information such as file creations or deletions ("new" or "gone", optionally "+l" if it‚Äôs a symlink) and mode changes ("+x" or
           "-x" for adding or removing executable bit respectively) in diffstat. The information is put between the filename part and the graph part. Implies [1m--stat[22m.

       --numstat
           Similar to [1m--stat[22m, but shows number of added and deleted lines in decimal notation and pathname without abbreviation, to make it more machine friendly. For binary files,
           outputs two [1m- [22minstead of saying [1m0 0[22m.

       --shortstat
           Output only the last line of the [1m--stat [22mformat containing total number of modified files, as well as number of added and deleted lines.

       -X[<param1,param2,...>], --dirstat[=<param1,param2,...>]
           Output the distribution of relative amount of changes for each sub-directory. The behavior of [1m--dirstat [22mcan be customized by passing it a comma separated list of
           parameters. The defaults are controlled by the [1mdiff.dirstat [22mconfiguration variable (see [1mgit-config[22m(1)). The following parameters are available:

           [1mchanges[0m
               Compute the dirstat numbers by counting the lines that have been removed from the source, or added to the destination. This ignores the amount of pure code movements
               within a file. In other words, rearranging lines in a file is not counted as much as other changes. This is the default behavior when no parameter is given.

           [1mlines[0m
               Compute the dirstat numbers by doing the regular line-based diff analysis, and summing the removed/added line counts. (For binary files, count 64-byte chunks instead,
               since binary files have no natural concept of lines). This is a more expensive [1m--dirstat [22mbehavior than the [1mchanges [22mbehavior, but it does count rearranged lines within a
               file as much as other changes. The resulting output is consistent with what you get from the other [1m--*stat [22moptions.

           [1mfiles[0m
               Compute the dirstat numbers by counting the number of files changed. Each changed file counts equally in the dirstat analysis. This is the computationally cheapest
               [1m--dirstat [22mbehavior, since it does not have to look at the file contents at all.

           [1mcumulative[0m
               Count changes in a child directory for the parent directory as well. Note that when using [1mcumulative[22m, the sum of the percentages reported may exceed 100%. The default
               (non-cumulative) behavior can be specified with the [1mnoncumulative [22mparameter.

           <limit>
               An integer parameter specifies a cut-off percent (3% by default). Directories contributing less than this percentage of the changes are not shown in the output.

           Example: The following will count changed files, while ignoring directories with less than 10% of the total amount of changed files, and accumulating child directory counts
           in the parent directories: [1m--dirstat=files,10,cumulative[22m.

       --cumulative
           Synonym for --dirstat=cumulative

       --dirstat-by-file[=<param1,param2>...]
           Synonym for --dirstat=files,param1,param2...

       --summary
           Output a condensed summary of extended header information such as creations, renames and mode changes.

       --patch-with-stat
           Synonym for [1m-p --stat[22m.

       -z
           Separate the commits with NULs instead of newlines.

           Also, when [1m--raw [22mor [1m--numstat [22mhas been given, do not munge pathnames and use NULs as output field terminators.

           Without this option, pathnames with "unusual" characters are quoted as explained for the configuration variable [1mcore.quotePath [22m(see [1mgit-config[22m(1)).

       --name-only
           Show only names of changed files. The file names are often encoded in UTF-8. For more information see the discussion about encoding in the [1mgit-log[22m(1) manual page.

       --name-status
           Show only names and status of changed files. See the description of the [1m--diff-filter [22moption on what the status letters mean. Just like [1m--name-only [22mthe file names are often
           encoded in UTF-8.

       --submodule[=<format>]
           Specify how differences in submodules are shown. When specifying [1m--submodule=short [22mthe [4mshort[24m format is used. This format just shows the names of the commits at the
           beginning and end of the range. When [1m--submodule [22mor [1m--submodule=log [22mis specified, the [4mlog[24m format is used. This format lists the commits in the range like [1mgit-submodule[22m(1)
           [1msummary [22mdoes. When [1m--submodule=diff [22mis specified, the [4mdiff[24m format is used. This format shows an inline diff of the changes in the submodule contents between the commit
           range. Defaults to [1mdiff.submodule [22mor the [4mshort[24m format if the config option is unset.

       --color[=<when>]
           Show colored diff.  [1m--color [22m(i.e. without [4m=<when>[24m) is the same as [1m--color=always[22m.  [4m<when>[24m can be one of [1malways[22m, [1mnever[22m, or [1mauto[22m.

       --no-color
           Turn off colored diff. It is the same as [1m--color=never[22m.

       --color-moved[=<mode>]
           Moved lines of code are colored differently. The <mode> defaults to [4mno[24m if the option is not given and to [4mzebra[24m if the option with no mode is given. The mode must be one of:

           no
               Moved lines are not highlighted.

           default
               Is a synonym for [1mzebra[22m. This may change to a more sensible mode in the future.

           plain
               Any line that is added in one location and was removed in another location will be colored with [4mcolor.diff.newMoved[24m. Similarly [4mcolor.diff.oldMoved[24m will be used for
               removed lines that are added somewhere else in the diff. This mode picks up any moved line, but it is not very useful in a review to determine if a block of code was
               moved without permutation.

           blocks
               Blocks of moved text of at least 20 alphanumeric characters are detected greedily. The detected blocks are painted using either the [4mcolor.diff.{old,new}Moved[24m color.
               Adjacent blocks cannot be told apart.

           zebra
               Blocks of moved text are detected as in [4mblocks[24m mode. The blocks are painted using either the [4mcolor.diff.{old,new}Moved[24m color or [4mcolor.diff.{old,new}MovedAlternative[24m.
               The change between the two colors indicates that a new block was detected.

           dimmed-zebra
               Similar to [4mzebra[24m, but additional dimming of uninteresting parts of moved code is performed. The bordering lines of two adjacent blocks are considered interesting, the
               rest is uninteresting.  [1mdimmed_zebra [22mis a deprecated synonym.

       --no-color-moved
           Turn off move detection. This can be used to override configuration settings. It is the same as [1m--color-moved=no[22m.

       --color-moved-ws=<modes>
           This configures how whitespace is ignored when performing the move detection for [1m--color-moved[22m. These modes can be given as a comma separated list:

           no
               Do not ignore whitespace when performing move detection.

           ignore-space-at-eol
               Ignore changes in whitespace at EOL.

           ignore-space-change
               Ignore changes in amount of whitespace. This ignores whitespace at line end, and considers all other sequences of one or more whitespace characters to be equivalent.

           ignore-all-space
               Ignore whitespace when comparing lines. This ignores differences even if one line has whitespace where the other line has none.

           allow-indentation-change
               Initially ignore any whitespace in the move detection, then group the moved code blocks only into a block if the change in whitespace is the same per line. This is
               incompatible with the other modes.

       --no-color-moved-ws
           Do not ignore whitespace when performing move detection. This can be used to override configuration settings. It is the same as [1m--color-moved-ws=no[22m.

       --word-diff[=<mode>]
           Show a word diff, using the <mode> to delimit changed words. By default, words are delimited by whitespace; see [1m--word-diff-regex [22mbelow. The <mode> defaults to [4mplain[24m, and
           must be one of:

           color
               Highlight changed words using only colors. Implies [1m--color[22m.

           plain
               Show words as [1m[-removed-] [22mand [1m{+added+}[22m. Makes no attempts to escape the delimiters if they appear in the input, so the output may be ambiguous.

           porcelain
               Use a special line-based format intended for script consumption. Added/removed/unchanged runs are printed in the usual unified diff format, starting with a [1m+[22m/[1m-[22m/` `
               character at the beginning of the line and extending to the end of the line. Newlines in the input are represented by a tilde [1m~ [22mon a line of its own.

           none
               Disable word diff again.

           Note that despite the name of the first mode, color is used to highlight the changed parts in all modes if enabled.

       --word-diff-regex=<regex>
           Use <regex> to decide what a word is, instead of considering runs of non-whitespace to be a word. Also implies [1m--word-diff [22munless it was already enabled.

           Every non-overlapping match of the <regex> is considered a word. Anything between these matches is considered whitespace and ignored(!) for the purposes of finding
           differences. You may want to append [1m|[^[:space:]] [22mto your regular expression to make sure that it matches all non-whitespace characters. A match that contains a newline is
           silently truncated(!) at the newline.

           For example, [1m--word-diff-regex=.  [22mwill treat each character as a word and, correspondingly, show differences character by character.

           The regex can also be set via a diff driver or configuration option, see [1mgitattributes[22m(5) or [1mgit-config[22m(1). Giving it explicitly overrides any diff driver or configuration
           setting. Diff drivers override configuration settings.

       --color-words[=<regex>]
           Equivalent to [1m--word-diff=color [22mplus (if a regex was specified) [1m--word-diff-regex=<regex>[22m.

       --no-renames
           Turn off rename detection, even when the configuration file gives the default to do so.

       --[no-]rename-empty
           Whether to use empty blobs as rename source.

       --check
           Warn if changes introduce conflict markers or whitespace errors. What are considered whitespace errors is controlled by [1mcore.whitespace [22mconfiguration. By default, trailing
           whitespaces (including lines that consist solely of whitespaces) and a space character that is immediately followed by a tab character inside the initial indent of the line
           are considered whitespace errors. Exits with non-zero status if problems are found. Not compatible with --exit-code.

       --ws-error-highlight=<kind>
           Highlight whitespace errors in the [1mcontext[22m, [1mold [22mor [1mnew [22mlines of the diff. Multiple values are separated by comma, [1mnone [22mresets previous values, [1mdefault [22mreset the list to [1mnew[0m
           and [1mall [22mis a shorthand for [1mold,new,context[22m. When this option is not given, and the configuration variable [1mdiff.wsErrorHighlight [22mis not set, only whitespace errors in [1mnew[0m
           lines are highlighted. The whitespace errors are colored with [1mcolor.diff.whitespace[22m.

       --full-index
           Instead of the first handful of characters, show the full pre- and post-image blob object names on the "index" line when generating patch format output.

       --binary
           In addition to [1m--full-index[22m, output a binary diff that can be applied with [1mgit-apply[22m. Implies [1m--patch[22m.

       --abbrev[=<n>]
           Instead of showing the full 40-byte hexadecimal object name in diff-raw format output and diff-tree header lines, show the shortest prefix that is at least [4m<n>[24m hexdigits
           long that uniquely refers the object. In diff-patch output format, [1m--full-index [22mtakes higher precedence, i.e. if [1m--full-index [22mis specified, full blob names will be shown
           regardless of [1m--abbrev[22m. Non default number of digits can be specified with [1m--abbrev=<n>[22m.

       -B[<n>][/<m>], --break-rewrites[=[<n>][/<m>]]
           Break complete rewrite changes into pairs of delete and create. This serves two purposes:

           It affects the way a change that amounts to a total rewrite of a file not as a series of deletion and insertion mixed together with a very few lines that happen to match
           textually as the context, but as a single deletion of everything old followed by a single insertion of everything new, and the number [1mm [22mcontrols this aspect of the -B
           option (defaults to 60%).  [1m-B/70% [22mspecifies that less than 30% of the original should remain in the result for Git to consider it a total rewrite (i.e. otherwise the
           resulting patch will be a series of deletion and insertion mixed together with context lines).

           When used with -M, a totally-rewritten file is also considered as the source of a rename (usually -M only considers a file that disappeared as the source of a rename), and
           the number [1mn [22mcontrols this aspect of the -B option (defaults to 50%).  [1m-B20% [22mspecifies that a change with addition and deletion compared to 20% or more of the file‚Äôs size
           are eligible for being picked up as a possible source of a rename to another file.

       -M[<n>], --find-renames[=<n>]
           If generating diffs, detect and report renames for each commit. For following files across renames while traversing history, see [1m--follow[22m. If [1mn [22mis specified, it is a
           threshold on the similarity index (i.e. amount of addition/deletions compared to the file‚Äôs size). For example, [1m-M90% [22mmeans Git should consider a delete/add pair to be a
           rename if more than 90% of the file hasn‚Äôt changed. Without a [1m% [22msign, the number is to be read as a fraction, with a decimal point before it. I.e., [1m-M5 [22mbecomes 0.5, and is
           thus the same as [1m-M50%[22m. Similarly, [1m-M05 [22mis the same as [1m-M5%[22m. To limit detection to exact renames, use [1m-M100%[22m. The default similarity index is 50%.

       -C[<n>], --find-copies[=<n>]
           Detect copies as well as renames. See also [1m--find-copies-harder[22m. If [1mn [22mis specified, it has the same meaning as for [1m-M<n>[22m.

       --find-copies-harder
           For performance reasons, by default, [1m-C [22moption finds copies only if the original file of the copy was modified in the same changeset. This flag makes the command inspect
           unmodified files as candidates for the source of copy. This is a very expensive operation for large projects, so use it with caution. Giving more than one [1m-C [22moption has the
           same effect.

       -D, --irreversible-delete
           Omit the preimage for deletes, i.e. print only the header but not the diff between the preimage and [1m/dev/null[22m. The resulting patch is not meant to be applied with [1mpatch [22mor
           [1mgit apply[22m; this is solely for people who want to just concentrate on reviewing the text after the change. In addition, the output obviously lacks enough information to
           apply such a patch in reverse, even manually, hence the name of the option.

           When used together with [1m-B[22m, omit also the preimage in the deletion part of a delete/create pair.

       -l<num>
           The [1m-M [22mand [1m-C [22moptions involve some preliminary steps that can detect subsets of renames/copies cheaply, followed by an exhaustive fallback portion that compares all
           remaining unpaired destinations to all relevant sources. (For renames, only remaining unpaired sources are relevant; for copies, all original sources are relevant.) For N
           sources and destinations, this exhaustive check is O(N^2). This option prevents the exhaustive portion of rename/copy detection from running if the number of
           source/destination files involved exceeds the specified number. Defaults to diff.renameLimit. Note that a value of 0 is treated as unlimited.

       --diff-filter=[(A|C|D|M|R|T|U|X|B)...[*]]
           Select only files that are Added ([1mA[22m), Copied ([1mC[22m), Deleted ([1mD[22m), Modified ([1mM[22m), Renamed ([1mR[22m), have their type (i.e. regular file, symlink, submodule, ...) changed ([1mT[22m), are
           Unmerged ([1mU[22m), are Unknown ([1mX[22m), or have had their pairing Broken ([1mB[22m). Any combination of the filter characters (including none) can be used. When [1m* [22m(All-or-none) is added to
           the combination, all paths are selected if there is any file that matches other criteria in the comparison; if there is no file that matches other criteria, nothing is
           selected.

           Also, these upper-case letters can be downcased to exclude. E.g.  [1m--diff-filter=ad [22mexcludes added and deleted paths.

           Note that not all diffs can feature all types. For instance, copied and renamed entries cannot appear if detection for those types is disabled.

       -S<string>
           Look for differences that change the number of occurrences of the specified string (i.e. addition/deletion) in a file. Intended for the scripter‚Äôs use.

           It is useful when you‚Äôre looking for an exact block of code (like a struct), and want to know the history of that block since it first came into being: use the feature
           iteratively to feed the interesting block in the preimage back into [1m-S[22m, and keep going until you get the very first version of the block.

           Binary files are searched as well.

       -G<regex>
           Look for differences whose patch text contains added/removed lines that match <regex>.

           To illustrate the difference between [1m-S<regex> --pickaxe-regex [22mand [1m-G<regex>[22m, consider a commit with the following diff in the same file:

               +    return frotz(nitfol, two->ptr, 1, 0);
               ...
               -    hit = frotz(nitfol, mf2.ptr, 1, 0);

           While [1mgit log -G"frotz\(nitfol" [22mwill show this commit, [1mgit log -S"frotz\(nitfol" --pickaxe-regex [22mwill not (because the number of occurrences of that string did not change).

           Unless [1m--text [22mis supplied patches of binary files without a textconv filter will be ignored.

           See the [4mpickaxe[24m entry in [1mgitdiffcore[22m(7) for more information.

       --find-object=<object-id>
           Look for differences that change the number of occurrences of the specified object. Similar to [1m-S[22m, just the argument is different in that it doesn‚Äôt search for a specific
           string but for a specific object id.

           The object can be a blob or a submodule commit. It implies the [1m-t [22moption in [1mgit-log [22mto also find trees.

       --pickaxe-all
           When [1m-S [22mor [1m-G [22mfinds a change, show all the changes in that changeset, not just the files that contain the change in <string>.

       --pickaxe-regex
           Treat the <string> given to [1m-S [22mas an extended POSIX regular expression to match.

       -O<orderfile>
           Control the order in which files appear in the output. This overrides the [1mdiff.orderFile [22mconfiguration variable (see [1mgit-config[22m(1)). To cancel [1mdiff.orderFile[22m, use
           [1m-O/dev/null[22m.

           The output order is determined by the order of glob patterns in <orderfile>. All files with pathnames that match the first pattern are output first, all files with
           pathnames that match the second pattern (but not the first) are output next, and so on. All files with pathnames that do not match any pattern are output last, as if there
           was an implicit match-all pattern at the end of the file. If multiple pathnames have the same rank (they match the same pattern but no earlier patterns), their output order
           relative to each other is the normal order.

           <orderfile> is parsed as follows:

           ‚Ä¢   Blank lines are ignored, so they can be used as separators for readability.

           ‚Ä¢   Lines starting with a hash ("[1m#[22m") are ignored, so they can be used for comments. Add a backslash ("[1m\[22m") to the beginning of the pattern if it starts with a hash.

           ‚Ä¢   Each other line contains a single pattern.

           Patterns have the same syntax and semantics as patterns used for fnmatch(3) without the FNM_PATHNAME flag, except a pathname also matches a pattern if removing any number
           of the final pathname components matches the pattern. For example, the pattern "[1mfoo*bar[22m" matches "[1mfooasdfbar[22m" and "[1mfoo/bar/baz/asdf[22m" but not "[1mfoobarx[22m".

       --skip-to=<file>, --rotate-to=<file>
           Discard the files before the named <file> from the output (i.e.  [4mskip[24m [4mto[24m), or move them to the end of the output (i.e.  [4mrotate[24m [4mto[24m). These options were invented primarily
           for the use of the [1mgit difftool [22mcommand, and may not be very useful otherwise.

       -R
           Swap two inputs; that is, show differences from index or on-disk file to tree contents.

       --relative[=<path>], --no-relative
           When run from a subdirectory of the project, it can be told to exclude changes outside the directory and show pathnames relative to it with this option. When you are not in
           a subdirectory (e.g. in a bare repository), you can name which subdirectory to make the output relative to by giving a <path> as an argument.  [1m--no-relative [22mcan be used to
           countermand both [1mdiff.relative [22mconfig option and previous [1m--relative[22m.

       -a, --text
           Treat all files as text.

       --ignore-cr-at-eol
           Ignore carriage-return at the end of line when doing a comparison.

       --ignore-space-at-eol
           Ignore changes in whitespace at EOL.

       -b, --ignore-space-change
           Ignore changes in amount of whitespace. This ignores whitespace at line end, and considers all other sequences of one or more whitespace characters to be equivalent.

       -w, --ignore-all-space
           Ignore whitespace when comparing lines. This ignores differences even if one line has whitespace where the other line has none.

       --ignore-blank-lines
           Ignore changes whose lines are all blank.

       -I<regex>, --ignore-matching-lines=<regex>
           Ignore changes whose all lines match <regex>. This option may be specified more than once.

       --inter-hunk-context=<lines>
           Show the context between diff hunks, up to the specified number of lines, thereby fusing hunks that are close to each other. Defaults to [1mdiff.interHunkContext [22mor 0 if the
           config option is unset.

       -W, --function-context
           Show whole function as context lines for each change. The function names are determined in the same way as [1mgit diff [22mworks out patch hunk headers (see [4mDefining[24m [4ma[24m [4mcustom[0m
           [4mhunk-header[24m in [1mgitattributes[22m(5)).

       --ext-diff
           Allow an external diff helper to be executed. If you set an external diff driver with [1mgitattributes[22m(5), you need to use this option with [1mgit-log[22m(1) and friends.

       --no-ext-diff
           Disallow external diff drivers.

       --textconv, --no-textconv
           Allow (or disallow) external text conversion filters to be run when comparing binary files. See [1mgitattributes[22m(5) for details. Because textconv filters are typically a
           one-way conversion, the resulting diff is suitable for human consumption, but cannot be applied. For this reason, textconv filters are enabled by default only for [1mgit-[0m
           [1mdiff[22m(1) and [1mgit-log[22m(1), but not for [1mgit-format-patch[22m(1) or diff plumbing commands.

       --ignore-submodules[=<when>]
           Ignore changes to submodules in the diff generation. <when> can be either "none", "untracked", "dirty" or "all", which is the default. Using "none" will consider the
           submodule modified when it either contains untracked or modified files or its HEAD differs from the commit recorded in the superproject and can be used to override any
           settings of the [4mignore[24m option in [1mgit-config[22m(1) or [1mgitmodules[22m(5). When "untracked" is used submodules are not considered dirty when they only contain untracked content (but
           they are still scanned for modified content). Using "dirty" ignores all changes to the work tree of submodules, only changes to the commits stored in the superproject are
           shown (this was the behavior until 1.7.0). Using "all" hides all changes to submodules.

       --src-prefix=<prefix>
           Show the given source prefix instead of "a/".

       --dst-prefix=<prefix>
           Show the given destination prefix instead of "b/".

       --no-prefix
           Do not show any source or destination prefix.

       --default-prefix
           Use the default source and destination prefixes ("a/" and "b/"). This is usually the default already, but may be used to override config such as [1mdiff.noprefix[22m.

       --line-prefix=<prefix>
           Prepend an additional prefix to every line of output.

       --ita-invisible-in-index
           By default entries added by "git add -N" appear as an existing empty file in "git diff" and a new file in "git diff --cached". This option makes the entry appear as a new
           file in "git diff" and non-existent in "git diff --cached". This option could be reverted with [1m--ita-visible-in-index[22m. Both options are experimental and could be removed in
           future.

       For more detailed explanation on these common options, see also [1mgitdiffcore[22m(7).

[1mGENERATING PATCH TEXT WITH -P[0m
       Running [1mgit-diff[22m(1), [1mgit-log[22m(1), [1mgit-show[22m(1), [1mgit-diff-index[22m(1), [1mgit-diff-tree[22m(1), or [1mgit-diff-files[22m(1) with the [1m-p [22moption produces patch text. You can customize the creation
       of patch text via the [1mGIT_EXTERNAL_DIFF [22mand the [1mGIT_DIFF_OPTS [22menvironment variables (see [1mgit[22m(1)), and the [1mdiff [22mattribute (see [1mgitattributes[22m(5)).

       What the -p option produces is slightly different from the traditional diff format:

        1. It is preceded by a "git diff" header that looks like this:

               diff --git a/file1 b/file2

           The [1ma/ [22mand [1mb/ [22mfilenames are the same unless rename/copy is involved. Especially, even for a creation or a deletion, [1m/dev/null [22mis [4mnot[24m used in place of the [1ma/ [22mor [1mb/[0m
           filenames.

           When a rename/copy is involved, [1mfile1 [22mand [1mfile2 [22mshow the name of the source file of the rename/copy and the name of the file that the rename/copy produces, respectively.

        2. It is followed by one or more extended header lines:

               old mode <mode>
               new mode <mode>
               deleted file mode <mode>
               new file mode <mode>
               copy from <path>
               copy to <path>
               rename from <path>
               rename to <path>
               similarity index <number>
               dissimilarity index <number>
               index <hash>..<hash> <mode>

           File modes are printed as 6-digit octal numbers including the file type and file permission bits.

           Path names in extended headers do not include the [1ma/ [22mand [1mb/ [22mprefixes.

           The similarity index is the percentage of unchanged lines, and the dissimilarity index is the percentage of changed lines. It is a rounded down integer, followed by a
           percent sign. The similarity index value of 100% is thus reserved for two equal files, while 100% dissimilarity means that no line from the old file made it into the new
           one.

           The index line includes the blob object names before and after the change. The <mode> is included if the file mode does not change; otherwise, separate lines indicate the
           old and the new mode.

        3. Pathnames with "unusual" characters are quoted as explained for the configuration variable [1mcore.quotePath [22m(see [1mgit-config[22m(1)).

        4. All the [1mfile1 [22mfiles in the output refer to files before the commit, and all the [1mfile2 [22mfiles refer to files after the commit. It is incorrect to apply each change to each
           file sequentially. For example, this patch will swap a and b:

               diff --git a/a b/b
               rename from a
               rename to b
               diff --git a/b b/a
               rename from b
               rename to a

        5. Hunk headers mention the name of the function to which the hunk applies. See "Defining a custom hunk-header" in [1mgitattributes[22m(5) for details of how to tailor this to
           specific languages.

[1mCOMBINED DIFF FORMAT[0m
       Any diff-generating command can take the [1m-c [22mor [1m--cc [22moption to produce a [4mcombined[24m [4mdiff[24m when showing a merge. This is the default format when showing merges with [1mgit-diff[22m(1) or
       [1mgit-show[22m(1). Note also that you can give suitable [1m--diff-merges [22moption to any of these commands to force generation of diffs in a specific format.

       A "combined diff" format looks like this:

           diff --combined describe.c
           index fabadb8,cc95eb0..4866510
           --- a/describe.c
           +++ b/describe.c
           @@@ -98,20 -98,12 +98,20 @@@
                   return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;
             }

           - static void describe(char *arg)
            -static void describe(struct commit *cmit, int last_one)
           ++static void describe(char *arg, int last_one)
             {
            +      unsigned char sha1[20];
            +      struct commit *cmit;
                   struct commit_list *list;
                   static int initialized = 0;
                   struct commit_name *n;

            +      if (get_sha1(arg, sha1) < 0)
            +              usage(describe_usage);
            +      cmit = lookup_commit_reference(sha1);
            +      if (!cmit)
            +              usage(describe_usage);
            +
                   if (!initialized) {
                           initialized = 1;
                           for_each_ref(get_name);

        1. It is preceded by a "git diff" header, that looks like this (when the [1m-c [22moption is used):

               diff --combined file

           or like this (when the [1m--cc [22moption is used):

               diff --cc file

        2. It is followed by one or more extended header lines (this example shows a merge with two parents):

               index <hash>,<hash>..<hash>
               mode <mode>,<mode>..<mode>
               new file mode <mode>
               deleted file mode <mode>,<mode>

           The [1mmode <mode>,<mode>..<mode> [22mline appears only if at least one of the <mode> is different from the rest. Extended headers with information about detected content movement
           (renames and copying detection) are designed to work with the diff of two <tree-ish> and are not used by combined diff format.

        3. It is followed by a two-line from-file/to-file header:

               --- a/file
               +++ b/file

           Similar to the two-line header for the traditional [4munified[24m diff format, [1m/dev/null [22mis used to signal created or deleted files.

           However, if the --combined-all-paths option is provided, instead of a two-line from-file/to-file, you get an N+1 line from-file/to-file header, where N is the number of
           parents in the merge commit:

               --- a/file
               --- a/file
               --- a/file
               +++ b/file

           This extended format can be useful if rename or copy detection is active, to allow you to see the original name of the file in different parents.

        4. Chunk header format is modified to prevent people from accidentally feeding it to [1mpatch -p1[22m. Combined diff format was created for review of merge commit changes, and was
           not meant to be applied. The change is similar to the change in the extended [4mindex[24m header:

               @@@ <from-file-range> <from-file-range> <to-file-range> @@@

           There are (number of parents + 1) [1m@ [22mcharacters in the chunk header for combined diff format.

       Unlike the traditional [4munified[24m diff format, which shows two files A and B with a single column that has [1m- [22m(minus ‚Äî appears in A but removed in B), [1m+ [22m(plus ‚Äî missing in A but
       added to B), or [1m" " [22m(space ‚Äî unchanged) prefix, this format compares two or more files file1, file2,... with one file X, and shows how X differs from each of fileN. One column
       for each of fileN is prepended to the output line to note how X‚Äôs line is different from it.

       A [1m- [22mcharacter in the column N means that the line appears in fileN but it does not appear in the result. A [1m+ [22mcharacter in the column N means that the line appears in the
       result, and fileN does not have that line (in other words, the line was added, from the point of view of that parent).

       In the above example output, the function signature was changed from both files (hence two [1m- [22mremovals from both file1 and file2, plus [1m++ [22mto mean one line that was added does
       not appear in either file1 or file2). Also, eight other lines are the same from file1 but do not appear in file2 (hence prefixed with [1m+[22m).

       When shown by [1mgit diff-tree -c[22m, it compares the parents of a merge commit with the merge result (i.e. file1..fileN are the parents). When shown by [1mgit diff-files -c[22m, it
       compares the two unresolved merge parents with the working tree file (i.e. file1 is stage 2 aka "our version", file2 is stage 3 aka "their version").

[1mEXAMPLES[0m
       [1mgit log --no-merges[0m
           Show the whole commit history, but skip any merges

       [1mgit log v2.6.12.. include/scsi drivers/scsi[0m
           Show all commits since version [4mv2.6.12[24m that changed any file in the [1minclude/scsi [22mor [1mdrivers/scsi [22msubdirectories

       [1mgit log --since="2 weeks ago" -- gitk[0m
           Show the changes during the last two weeks to the file [4mgitk[24m. The [1m-- [22mis necessary to avoid confusion with the [1mbranch [22mnamed [4mgitk[0m

       [1mgit log --name-status release..test[0m
           Show the commits that are in the "test" branch but not yet in the "release" branch, along with the list of paths each commit modifies.

       [1mgit log --follow builtin/rev-list.c[0m
           Shows the commits that changed [1mbuiltin/rev-list.c[22m, including those commits that occurred before the file was given its present name.

       [1mgit log --branches --not --remotes=origin[0m
           Shows all commits that are in any of local branches but not in any of remote-tracking branches for [4morigin[24m (what you have that origin doesn‚Äôt).

       [1mgit log master --not --remotes=*/master[0m
           Shows all commits that are in local master but not in any remote repository master branches.

       [1mgit log -p -m --first-parent[0m
           Shows the history including change diffs, but only from the ‚Äúmain branch‚Äù perspective, skipping commits that come from merged branches, and showing full diffs of changes
           introduced by the merges. This makes sense only when following a strict policy of merging all topic branches when staying on a single integration branch.

       [1mgit log -L '/int main/',/^}/:main.c[0m
           Shows how the function [1mmain() [22min the file [1mmain.c [22mevolved over time.

       [1mgit log -3[0m
           Limits the number of commits to show to 3.

[1mDISCUSSION[0m
       Git is to some extent character encoding agnostic.

       ‚Ä¢   The contents of the blob objects are uninterpreted sequences of bytes. There is no encoding translation at the core level.

       ‚Ä¢   Path names are encoded in UTF-8 normalization form C. This applies to tree objects, the index file, ref names, as well as path names in command line arguments, environment
           variables and config files ([1m.git/config [22m(see [1mgit-config[22m(1)), [1mgitignore[22m(5), [1mgitattributes[22m(5) and [1mgitmodules[22m(5)).

           Note that Git at the core level treats path names simply as sequences of non-NUL bytes, there are no path name encoding conversions (except on Mac and Windows). Therefore,
           using non-ASCII path names will mostly work even on platforms and file systems that use legacy extended ASCII encodings. However, repositories created on such systems will
           not work properly on UTF-8-based systems (e.g. Linux, Mac, Windows) and vice versa. Additionally, many Git-based tools simply assume path names to be UTF-8 and will fail to
           display other encodings correctly.

       ‚Ä¢   Commit log messages are typically encoded in UTF-8, but other extended ASCII encodings are also supported. This includes ISO-8859-x, CP125x and many others, but [4mnot[0m
           UTF-16/32, EBCDIC and CJK multi-byte encodings (GBK, Shift-JIS, Big5, EUC-x, CP9xx etc.).

       Although we encourage that the commit log messages are encoded in UTF-8, both the core and Git Porcelain are designed not to force UTF-8 on projects. If all participants of a
       particular project find it more convenient to use legacy encodings, Git does not forbid it. However, there are a few things to keep in mind.

        1. [4mgit[24m [4mcommit[24m and [4mgit[24m [4mcommit-tree[24m issue a warning if the commit log message given to it does not look like a valid UTF-8 string, unless you explicitly say your project uses a
           legacy encoding. The way to say this is to have [1mi18n.commitEncoding [22min [1m.git/config [22mfile, like this:

               [i18n]
                       commitEncoding = ISO-8859-1

           Commit objects created with the above setting record the value of [1mi18n.commitEncoding [22min their [1mencoding [22mheader. This is to help other people who look at them later. Lack of
           this header implies that the commit log message is encoded in UTF-8.

        2. [4mgit[24m [4mlog[24m, [4mgit[24m [4mshow[24m, [4mgit[24m [4mblame[24m and friends look at the [1mencoding [22mheader of a commit object, and try to re-code the log message into UTF-8 unless otherwise specified. You can
           specify the desired output encoding with [1mi18n.logOutputEncoding [22min [1m.git/config [22mfile, like this:

               [i18n]
                       logOutputEncoding = ISO-8859-1

           If you do not have this configuration variable, the value of [1mi18n.commitEncoding [22mis used instead.

       Note that we deliberately chose not to re-code the commit log message when a commit is made to force UTF-8 at the commit object level, because re-coding to UTF-8 is not
       necessarily a reversible operation.

[1mCONFIGURATION[0m
       See [1mgit-config[22m(1) for core variables and [1mgit-diff[22m(1) for settings related to diff generation.

       format.pretty
           Default for the [1m--format [22moption. (See [4mPretty[24m [4mFormats[24m above.) Defaults to [1mmedium[22m.

       i18n.logOutputEncoding
           Encoding to use when displaying logs. (See [4mDiscussion[24m above.) Defaults to the value of [1mi18n.commitEncoding [22mif set, and UTF-8 otherwise.

       Everything above this line in this section isn‚Äôt included from the [1mgit-config[22m(1) documentation. The content that follows is the same as what‚Äôs found there:

       log.abbrevCommit
           If true, makes [1mgit-log[22m(1), [1mgit-show[22m(1), and [1mgit-whatchanged[22m(1) assume [1m--abbrev-commit[22m. You may override this option with [1m--no-abbrev-commit[22m.

       log.date
           Set the default date-time mode for the [4mlog[24m command. Setting a value for log.date is similar to using [4mgit[24m [4mlog[24m's [1m--date [22moption. See [1mgit-log[22m(1) for details.

           If the format is set to "auto:foo" and the pager is in use, format "foo" will be used for the date format. Otherwise, "default" will be used.

       log.decorate
           Print out the ref names of any commits that are shown by the log command. If [4mshort[24m is specified, the ref name prefixes [4mrefs/heads/[24m, [4mrefs/tags/[24m and [4mrefs/remotes/[24m will not be
           printed. If [4mfull[24m is specified, the full ref name (including prefix) will be printed. If [4mauto[24m is specified, then if the output is going to a terminal, the ref names are
           shown as if [4mshort[24m were given, otherwise no ref names are shown. This is the same as the [1m--decorate [22moption of the [1mgit log[22m.

       log.initialDecorationSet
           By default, [1mgit log [22monly shows decorations for certain known ref namespaces. If [4mall[24m is specified, then show all refs as decorations.

       log.excludeDecoration
           Exclude the specified patterns from the log decorations. This is similar to the [1m--decorate-refs-exclude [22mcommand-line option, but the config option can be overridden by the
           [1m--decorate-refs [22moption.

       log.diffMerges
           Set diff format to be used when [1m--diff-merges=on [22mis specified, see [1m--diff-merges [22min [1mgit-log[22m(1) for details. Defaults to [1mseparate[22m.

       log.follow
           If [1mtrue[22m, [1mgit log [22mwill act as if the [1m--follow [22moption was used when a single <path> is given. This has the same limitations as [1m--follow[22m, i.e. it cannot be used to follow
           multiple files and does not work well on non-linear history.

       log.graphColors
           A list of colors, separated by commas, that can be used to draw history lines in [1mgit log --graph[22m.

       log.showRoot
           If true, the initial commit will be shown as a big creation event. This is equivalent to a diff against an empty tree. Tools like [1mgit-log[22m(1) or [1mgit-whatchanged[22m(1), which
           normally hide the root commit will now show it. True by default.

       log.showSignature
           If true, makes [1mgit-log[22m(1), [1mgit-show[22m(1), and [1mgit-whatchanged[22m(1) assume [1m--show-signature[22m.

       log.mailmap
           If true, makes [1mgit-log[22m(1), [1mgit-show[22m(1), and [1mgit-whatchanged[22m(1) assume [1m--use-mailmap[22m, otherwise assume [1m--no-use-mailmap[22m. True by default.

       notes.mergeStrategy
           Which merge strategy to choose by default when resolving notes conflicts. Must be one of [1mmanual[22m, [1mours[22m, [1mtheirs[22m, [1munion[22m, or [1mcat_sort_uniq[22m. Defaults to [1mmanual[22m. See the "NOTES
           MERGE STRATEGIES" section of [1mgit-notes[22m(1) for more information on each strategy.

           This setting can be overridden by passing the [1m--strategy [22moption to [1mgit-notes[22m(1).

       notes.<name>.mergeStrategy
           Which merge strategy to choose when doing a notes merge into refs/notes/<name>. This overrides the more general "notes.mergeStrategy". See the "NOTES MERGE STRATEGIES"
           section in [1mgit-notes[22m(1) for more information on the available strategies.

       notes.displayRef
           Which ref (or refs, if a glob or specified more than once), in addition to the default set by [1mcore.notesRef [22mor [1mGIT_NOTES_REF[22m, to read notes from when showing commit
           messages with the [4mgit[24m [4mlog[24m family of commands.

           This setting can be overridden with the [1mGIT_NOTES_DISPLAY_REF [22menvironment variable, which must be a colon separated list of refs or globs.

           A warning will be issued for refs that do not exist, but a glob that does not match any refs is silently ignored.

           This setting can be disabled by the [1m--no-notes [22moption to the [4mgit[24m [4mlog[24m family of commands, or by the [1m--notes=<ref> [22moption accepted by those commands.

           The effective value of "core.notesRef" (possibly overridden by GIT_NOTES_REF) is also implicitly added to the list of refs to be displayed.

       notes.rewrite.<command>
           When rewriting commits with <command> (currently [1mamend [22mor [1mrebase[22m), if this variable is [1mfalse[22m, git will not copy notes from the original to the rewritten commit. Defaults to
           [1mtrue[22m. See also "[1mnotes.rewriteRef[22m" below.

           This setting can be overridden with the [1mGIT_NOTES_REWRITE_REF [22menvironment variable, which must be a colon separated list of refs or globs.

       notes.rewriteMode
           When copying notes during a rewrite (see the "notes.rewrite.<command>" option), determines what to do if the target commit already has a note. Must be one of [1moverwrite[22m,
           [1mconcatenate[22m, [1mcat_sort_uniq[22m, or [1mignore[22m. Defaults to [1mconcatenate[22m.

           This setting can be overridden with the [1mGIT_NOTES_REWRITE_MODE [22menvironment variable.

       notes.rewriteRef
           When copying notes during a rewrite, specifies the (fully qualified) ref whose notes should be copied. May be a glob, in which case notes in all matching refs will be
           copied. You may also specify this configuration several times.

           Does not have a default value; you must configure this variable to enable note rewriting. Set it to [1mrefs/notes/commits [22mto enable rewriting for the default commit notes.

           Can be overridden with the [1mGIT_NOTES_REWRITE_REF [22menvironment variable. See [1mnotes.rewrite.<command> [22mabove for a further description of its format.

[1mGIT[0m
       Part of the [1mgit[22m(1) suite

Git 2.43.0                                                                             07/02/2025                                                                            [4mGIT-LOG[24m(1)
